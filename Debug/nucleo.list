
nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005704  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005954  08005954  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800595c  0800595c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005960  08005960  00015960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  20000078  080059dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080059dc  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014348  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5a  00000000  00000000  000343f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00036f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  000380c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295bb  00000000  00000000  000390e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001588a  00000000  00000000  000626a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbea6  00000000  00000000  00077f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc8  00000000  00000000  00173e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005874 	.word	0x08005874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08005874 	.word	0x08005874

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> IR_OUT
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <MX_GPIO_Init+0x88>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <MX_GPIO_Init+0x88>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ee:	4b19      	ldr	r3, [pc, #100]	; (8000554 <MX_GPIO_Init+0x88>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b16      	ldr	r3, [pc, #88]	; (8000554 <MX_GPIO_Init+0x88>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a15      	ldr	r2, [pc, #84]	; (8000554 <MX_GPIO_Init+0x88>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b13      	ldr	r3, [pc, #76]	; (8000554 <MX_GPIO_Init+0x88>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <MX_GPIO_Init+0x88>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <MX_GPIO_Init+0x88>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <MX_GPIO_Init+0x88>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800052a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800052e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000530:	2302      	movs	r3, #2
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000538:	2301      	movs	r3, #1
 800053a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_IR;
 800053c:	2301      	movs	r3, #1
 800053e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	4619      	mov	r1, r3
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <MX_GPIO_Init+0x8c>)
 8000548:	f000 ff08 	bl	800135c <HAL_GPIO_Init>

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	48000400 	.word	0x48000400

0800055c <MX_IRTIM_Init>:

/* USER CODE END 0 */

/* IRTIM init function */
void MX_IRTIM_Init(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END IRTIM_Init 1 */
  /* USER CODE BEGIN IRTIM_Init 2 */

  /* USER CODE END IRTIM_Init 2 */

}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
	...

0800056c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2b0a      	cmp	r3, #10
 8000578:	d109      	bne.n	800058e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800057a:	230d      	movs	r3, #13
 800057c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800057e:	f107 010f 	add.w	r1, r7, #15
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2201      	movs	r2, #1
 8000588:	4807      	ldr	r0, [pc, #28]	; (80005a8 <__io_putchar+0x3c>)
 800058a:	f003 ff46 	bl	800441a <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800058e:	1d39      	adds	r1, r7, #4
 8000590:	f04f 33ff 	mov.w	r3, #4294967295
 8000594:	2201      	movs	r2, #1
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <__io_putchar+0x3c>)
 8000598:	f003 ff3f 	bl	800441a <HAL_UART_Transmit>
    return 1;
 800059c:	2301      	movs	r3, #1
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000168 	.word	0x20000168

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode - timeout
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  if (htim == &htim16)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d108      	bne.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	//  if (RFDemoStatus == (uint8_t)RC5_ENC)
    //{
      RC5_Encode_SignalGenerate();
 80005bc:	f000 fa12 	bl	80009e4 <RC5_Encode_SignalGenerate>
      if(0x00 == RC5SendOpCompleteFlag)
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d002      	beq.n	80005ce <HAL_TIM_PeriodElapsedCallback+0x22>
		{
		  //printf("Complete nie git\n");
		}else{
			printf("Complete git\n");
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80005ca:	f004 fcc3 	bl	8004f54 <puts>
    if (RFDemoStatus == (uint8_t)RC5_DEC)
    {
      RC5_ResetPacket();
    }
  }*/
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000d0 	.word	0x200000d0
 80005dc:	20000004 	.word	0x20000004
 80005e0:	0800588c 	.word	0x0800588c

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fd31 	bl	800104e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f836 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f7ff ff6c 	bl	80004cc <MX_GPIO_Init>
  MX_IRTIM_Init();
 80005f4:	f7ff ffb2 	bl	800055c <MX_IRTIM_Init>
  //MX_TIM16_Init();
  //MX_TIM17_Init();
  MX_RTC_Init();
 80005f8:	f000 fb02 	bl	8000c00 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fc8c 	bl	8000f18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  RC5_Encode_Init();
 8000600:	f000 f8c0 	bl	8000784 <RC5_Encode_Init>

  HAL_TIM_Base_Start_IT(&htim16);
 8000604:	480e      	ldr	r0, [pc, #56]	; (8000640 <main+0x5c>)
 8000606:	f002 fd65 	bl	80030d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim17);
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0x60>)
 800060c:	f002 fcfa 	bl	8003004 <HAL_TIM_Base_Start>

  AddressIndex = 0x06;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <main+0x64>)
 8000612:	2206      	movs	r2, #6
 8000614:	701a      	strb	r2, [r3, #0]
  InstructionIndex = 15;
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <main+0x68>)
 8000618:	220f      	movs	r2, #15
 800061a:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  RC5_Encode_SendFrame(AddressIndex, InstructionIndex, RC5Ctrl1);
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <main+0x64>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4a0a      	ldr	r2, [pc, #40]	; (800064c <main+0x68>)
 8000622:	7811      	ldrb	r1, [r2, #0]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <main+0x6c>)
 8000626:	8812      	ldrh	r2, [r2, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f9a9 	bl	8000980 <RC5_Encode_SendFrame>

      /* if data do not send compelet */
      if(0x00 == RC5SendOpReadyFlag)
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <main+0x70>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f2      	beq.n	800061c <main+0x38>
      {
    	  //printf("Ready nie git\n");
      }else{
    	  printf("Ready git\n");
 8000636:	4808      	ldr	r0, [pc, #32]	; (8000658 <main+0x74>)
 8000638:	f004 fc8c 	bl	8004f54 <puts>
	  RC5_Encode_SendFrame(AddressIndex, InstructionIndex, RC5Ctrl1);
 800063c:	e7ee      	b.n	800061c <main+0x38>
 800063e:	bf00      	nop
 8000640:	200000d0 	.word	0x200000d0
 8000644:	2000011c 	.word	0x2000011c
 8000648:	200000a3 	.word	0x200000a3
 800064c:	200000a4 	.word	0x200000a4
 8000650:	200000a0 	.word	0x200000a0
 8000654:	2000009c 	.word	0x2000009c
 8000658:	0800589c 	.word	0x0800589c

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b0b8      	sub	sp, #224	; 0xe0
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000666:	2244      	movs	r2, #68	; 0x44
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 fbfc 	bl	8004e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000680:	463b      	mov	r3, r7
 8000682:	2288      	movs	r2, #136	; 0x88
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fbee 	bl	8004e68 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800068c:	f001 f810 	bl	80016b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000690:	4b38      	ldr	r3, [pc, #224]	; (8000774 <SystemClock_Config+0x118>)
 8000692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000696:	4a37      	ldr	r2, [pc, #220]	; (8000774 <SystemClock_Config+0x118>)
 8000698:	f023 0318 	bic.w	r3, r3, #24
 800069c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a0:	2314      	movs	r3, #20
 80006a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 36;
 80006d0:	2324      	movs	r3, #36	; 0x24
 80006d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d6:	2307      	movs	r3, #7
 80006d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 f853 	bl	8001798 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006f8:	f000 f83e 	bl	8000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800071e:	2104      	movs	r1, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fc15 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800072c:	f000 f824 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2;
 8000730:	f04f 1302 	mov.w	r3, #131074	; 0x20002
 8000734:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000736:	2300      	movs	r3, #0
 8000738:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800073a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800073e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fe27 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8000750:	f000 f812 	bl	8000778 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000754:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000758:	f000 ffc8 	bl	80016ec <HAL_PWREx_ControlVoltageScaling>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000762:	f000 f809 	bl	8000778 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000766:	f002 f901 	bl	800296c <HAL_RCCEx_EnableMSIPLLMode>
}
 800076a:	bf00      	nop
 800076c:	37e0      	adds	r7, #224	; 0xe0
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40021000 	.word	0x40021000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <RC5_Encode_Init>:
  * @brief Init Hardware (IPs used) for RC5 generation
  * @param None
  * @retval  None
  */
void RC5_Encode_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08e      	sub	sp, #56	; 0x38
 8000788:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef ch_config;
  GPIO_InitTypeDef gpio_init_struct;

  /* TIM16 clock enable */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800078a:	4b77      	ldr	r3, [pc, #476]	; (8000968 <RC5_Encode_Init+0x1e4>)
 800078c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078e:	4a76      	ldr	r2, [pc, #472]	; (8000968 <RC5_Encode_Init+0x1e4>)
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	6613      	str	r3, [r2, #96]	; 0x60
 8000796:	4b74      	ldr	r3, [pc, #464]	; (8000968 <RC5_Encode_Init+0x1e4>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* TIM17 clock enable */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80007a2:	4b71      	ldr	r3, [pc, #452]	; (8000968 <RC5_Encode_Init+0x1e4>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	4a70      	ldr	r2, [pc, #448]	; (8000968 <RC5_Encode_Init+0x1e4>)
 80007a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ac:	6613      	str	r3, [r2, #96]	; 0x60
 80007ae:	4b6e      	ldr	r3, [pc, #440]	; (8000968 <RC5_Encode_Init+0x1e4>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]

  htim16.Instance = TIM16;
 80007ba:	4b6c      	ldr	r3, [pc, #432]	; (800096c <RC5_Encode_Init+0x1e8>)
 80007bc:	4a6c      	ldr	r2, [pc, #432]	; (8000970 <RC5_Encode_Init+0x1ec>)
 80007be:	601a      	str	r2, [r3, #0]
  htim17.Instance = TIM17;
 80007c0:	4b6c      	ldr	r3, [pc, #432]	; (8000974 <RC5_Encode_Init+0x1f0>)
 80007c2:	4a6d      	ldr	r2, [pc, #436]	; (8000978 <RC5_Encode_Init+0x1f4>)
 80007c4:	601a      	str	r2, [r3, #0]

  //Configure GPIO pin : PB9
  gpio_init_struct.Pin = GPIO_PIN_9;
 80007c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ca:	60bb      	str	r3, [r7, #8]
  gpio_init_struct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	60fb      	str	r3, [r7, #12]
  gpio_init_struct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007d4:	2301      	movs	r3, #1
 80007d6:	617b      	str	r3, [r7, #20]
  gpio_init_struct.Alternate = GPIO_AF1_IR;
 80007d8:	2301      	movs	r3, #1
 80007da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &gpio_init_struct);
 80007dc:	f107 0308 	add.w	r3, r7, #8
 80007e0:	4619      	mov	r1, r3
 80007e2:	4866      	ldr	r0, [pc, #408]	; (800097c <RC5_Encode_Init+0x1f8>)
 80007e4:	f000 fdba 	bl	800135c <HAL_GPIO_Init>


  /* DeInit TIM17 */
  HAL_TIM_OC_DeInit(&htim17);
 80007e8:	4862      	ldr	r0, [pc, #392]	; (8000974 <RC5_Encode_Init+0x1f0>)
 80007ea:	f002 fd69 	bl	80032c0 <HAL_TIM_OC_DeInit>

  /* Elementary period 888us */
  /* Time base configuration for timer 2 */
  htim17.Instance = TIM17;
 80007ee:	4b61      	ldr	r3, [pc, #388]	; (8000974 <RC5_Encode_Init+0x1f0>)
 80007f0:	4a61      	ldr	r2, [pc, #388]	; (8000978 <RC5_Encode_Init+0x1f4>)
 80007f2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80007f4:	4b5f      	ldr	r3, [pc, #380]	; (8000974 <RC5_Encode_Init+0x1f0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b5e      	ldr	r3, [pc, #376]	; (8000974 <RC5_Encode_Init+0x1f0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1999;
 8000800:	4b5c      	ldr	r3, [pc, #368]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000802:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000806:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000808:	4b5a      	ldr	r3, [pc, #360]	; (8000974 <RC5_Encode_Init+0x1f0>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800080e:	4b59      	ldr	r3, [pc, #356]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b57      	ldr	r3, [pc, #348]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800081a:	4856      	ldr	r0, [pc, #344]	; (8000974 <RC5_Encode_Init+0x1f0>)
 800081c:	f002 fb9a 	bl	8002f54 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <RC5_Encode_Init+0xa6>
  {
    Error_Handler();
 8000826:	f7ff ffa7 	bl	8000778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800082a:	4852      	ldr	r0, [pc, #328]	; (8000974 <RC5_Encode_Init+0x1f0>)
 800082c:	f002 febe 	bl	80035ac <HAL_TIM_PWM_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <RC5_Encode_Init+0xb6>
  {
    Error_Handler();
 8000836:	f7ff ff9f 	bl	8000778 <Error_Handler>
  }

  /* Output Compare Timing Mode configuration: Channel 1N */
  ch_config.OCMode = TIM_OCMODE_PWM1;
 800083a:	2360      	movs	r3, #96	; 0x60
 800083c:	61fb      	str	r3, [r7, #28]
  ch_config.Pulse = 499;
 800083e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000842:	623b      	str	r3, [r7, #32]
  ch_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  ch_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  ch_config.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ch_config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  ch_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &ch_config, TIM_CHANNEL_1) != HAL_OK)
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	4619      	mov	r1, r3
 8000860:	4844      	ldr	r0, [pc, #272]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000862:	f003 f89d 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <RC5_Encode_Init+0xec>
  {
    Error_Handler();
 800086c:	f7ff ff84 	bl	8000778 <Error_Handler>
  }

  TIM_SET_CAPTUREPOLARITY(&htim17, TIM_CHANNEL_1, TIM_CCxN_ENABLE | TIM_CCx_ENABLE );
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6a1a      	ldr	r2, [r3, #32]
 8000876:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0205 	orr.w	r2, r2, #5
 800087e:	621a      	str	r2, [r3, #32]

  HAL_TIM_OC_Start(&htim17, TIM_CHANNEL_1);
 8000880:	2100      	movs	r1, #0
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <RC5_Encode_Init+0x1f0>)
 8000884:	f002 fd8c 	bl	80033a0 <HAL_TIM_OC_Start>

  /* DeInit TIM16 */
  HAL_TIM_OC_DeInit(&htim16);
 8000888:	4838      	ldr	r0, [pc, #224]	; (800096c <RC5_Encode_Init+0x1e8>)
 800088a:	f002 fd19 	bl	80032c0 <HAL_TIM_OC_DeInit>

  /* Time Base configuration for timer 16 */
  htim16.Instance = TIM16;
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000890:	4a37      	ldr	r2, [pc, #220]	; (8000970 <RC5_Encode_Init+0x1ec>)
 8000892:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000896:	223f      	movs	r2, #63	; 0x3f
 8000898:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <RC5_Encode_Init+0x1e8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 80008a0:	4b32      	ldr	r3, [pc, #200]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008a2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80008a6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008ba:	482c      	ldr	r0, [pc, #176]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008bc:	f002 fb4a 	bl	8002f54 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <RC5_Encode_Init+0x146>
  {
	  Error_Handler();
 80008c6:	f7ff ff57 	bl	8000778 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80008ca:	4828      	ldr	r0, [pc, #160]	; (800096c <RC5_Encode_Init+0x1e8>)
 80008cc:	f002 fca1 	bl	8003212 <HAL_TIM_OC_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <RC5_Encode_Init+0x156>
  {
	  Error_Handler();
 80008d6:	f7ff ff4f 	bl	8000778 <Error_Handler>
  }

  /* Channel 1 Configuration in Timing mode */
  ch_config.OCMode = TIM_OCMODE_TIMING;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
  ch_config.Pulse = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  ch_config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  ch_config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  ch_config.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  ch_config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  ch_config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim16, &ch_config, TIM_CHANNEL_1) != HAL_OK)
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	481b      	ldr	r0, [pc, #108]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000900:	f002 ffd4 	bl	80038ac <HAL_TIM_OC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <RC5_Encode_Init+0x18a>
  {
    Error_Handler();
 800090a:	f7ff ff35 	bl	8000778 <Error_Handler>
  }

  TIM_SET_CAPTUREPOLARITY(&htim16, TIM_CHANNEL_1, TIM_CCxN_ENABLE | TIM_CCx_ENABLE );
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6a1a      	ldr	r2, [r3, #32]
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f042 0205 	orr.w	r2, r2, #5
 800091c:	621a      	str	r2, [r3, #32]
  /* Peripheral interrupt init*/
  //HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(TIM16_IRQn);

  /* Enable the main output */
  __HAL_TIM_MOE_ENABLE(&htim16);
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800092c:	645a      	str	r2, [r3, #68]	; 0x44

  /* TIM Disable */
  __HAL_TIM_DISABLE(&htim16);
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6a1a      	ldr	r2, [r3, #32]
 8000934:	f241 1311 	movw	r3, #4369	; 0x1111
 8000938:	4013      	ands	r3, r2
 800093a:	2b00      	cmp	r3, #0
 800093c:	d10f      	bne.n	800095e <RC5_Encode_Init+0x1da>
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	f240 4344 	movw	r3, #1092	; 0x444
 8000948:	4013      	ands	r3, r2
 800094a:	2b00      	cmp	r3, #0
 800094c:	d107      	bne.n	800095e <RC5_Encode_Init+0x1da>
 800094e:	4b07      	ldr	r3, [pc, #28]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <RC5_Encode_Init+0x1e8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f022 0201 	bic.w	r2, r2, #1
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	3738      	adds	r7, #56	; 0x38
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	200000d0 	.word	0x200000d0
 8000970:	40014400 	.word	0x40014400
 8000974:	2000011c 	.word	0x2000011c
 8000978:	40014800 	.word	0x40014800
 800097c:	48000400 	.word	0x48000400

08000980 <RC5_Encode_SendFrame>:
  * @param RC5_Instruction : the RC5 command instruction
  * @param RC5_Ctrl : the RC5 Control bit.
  * @retval  None
  */
void RC5_Encode_SendFrame(uint8_t RC5_Address, uint8_t RC5_Instruction, RC5_Ctrl_t RC5_Ctrl)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	460b      	mov	r3, r1
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	4613      	mov	r3, r2
 8000990:	80bb      	strh	r3, [r7, #4]
  /* Generate a binary format of the Frame */
  RC5BinaryFrameFormat = RC5_BinFrameGeneration(RC5_Address, RC5_Instruction, RC5_Ctrl);
 8000992:	88ba      	ldrh	r2, [r7, #4]
 8000994:	79b9      	ldrb	r1, [r7, #6]
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f889 	bl	8000ab0 <RC5_BinFrameGeneration>
 800099e:	4603      	mov	r3, r0
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <RC5_Encode_SendFrame+0x54>)
 80009a4:	801a      	strh	r2, [r3, #0]

  /* Generate a Manchester format of the Frame */
  RC5ManchesterFrameFormat = RC5_ManchesterConvert(RC5BinaryFrameFormat);
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <RC5_Encode_SendFrame+0x54>)
 80009a8:	881b      	ldrh	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f8d0 	bl	8000b50 <RC5_ManchesterConvert>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a09      	ldr	r2, [pc, #36]	; (80009d8 <RC5_Encode_SendFrame+0x58>)
 80009b4:	6013      	str	r3, [r2, #0]

  /* Set the Send operation Ready flag to indicate that the frame is ready to be sent */
  RC5SendOpReadyFlag = 1;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <RC5_Encode_SendFrame+0x5c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]

  /* Reset the counter to ensure accurate timing of sync pulse */
  __HAL_TIM_SET_COUNTER(&htim16, 0);
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <RC5_Encode_SendFrame+0x60>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* TIM IT Enable */
  HAL_TIM_Base_Start_IT(&htim16);
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <RC5_Encode_SendFrame+0x60>)
 80009c6:	f002 fb85 	bl	80030d4 <HAL_TIM_Base_Start_IT>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000094 	.word	0x20000094
 80009d8:	20000098 	.word	0x20000098
 80009dc:	2000009c 	.word	0x2000009c
 80009e0:	200000d0 	.word	0x200000d0

080009e4 <RC5_Encode_SignalGenerate>:
/**
  * @brief Send by hardware Manchester Format RC5 Frame.
  * @retval None
  */
void RC5_Encode_SignalGenerate(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
  uint32_t bit_msg = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]

  if ((RC5SendOpReadyFlag == 1) && (BitsSentCounter <= (RC5GlobalFrameLength * 2)))
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <RC5_Encode_SignalGenerate+0xb4>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d124      	bne.n	8000a40 <RC5_Encode_SignalGenerate+0x5c>
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <RC5_Encode_SignalGenerate+0xb8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <RC5_Encode_SignalGenerate+0xbc>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	429a      	cmp	r2, r3
 8000a04:	dc1c      	bgt.n	8000a40 <RC5_Encode_SignalGenerate+0x5c>
  {
    RC5SendOpCompleteFlag = 0x00;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <RC5_Encode_SignalGenerate+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
    bit_msg = (uint8_t)((RC5ManchesterFrameFormat >> BitsSentCounter) & 1);
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <RC5_Encode_SignalGenerate+0xc4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <RC5_Encode_SignalGenerate+0xb8>)
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	40d3      	lsrs	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]

    if (bit_msg == 1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d103      	bne.n	8000a2c <RC5_Encode_SignalGenerate+0x48>
    /*	// Reset the OC1M bits in the CCMR1 register
    	TIM16->CCMR1 &= TIM_CCMR1_OC2M;
    	// configure the OC1M bits in the CCMRx register to inactive mode
    	TIM16->CCMR1 |= TIM_OCMODE_FORCED_ACTIVE;
	*/
    	TIM_ForcedOC1Config(TIM_OCMODE_FORCED_ACTIVE);
 8000a24:	2050      	movs	r0, #80	; 0x50
 8000a26:	f000 f8cd 	bl	8000bc4 <TIM_ForcedOC1Config>
 8000a2a:	e002      	b.n	8000a32 <RC5_Encode_SignalGenerate+0x4e>
    /*	// Reset the OC1M bits in the CCMR1 register
		TIM16->CCMR1 &= TIM_CCMR1_OC2M;
		// configure the OC1M bits in the CCMRx register to inactive mode
		TIM16->CCMR1 |= TIM_OCMODE_FORCED_INACTIVE;
	*/
    	TIM_ForcedOC1Config(TIM_OCMODE_FORCED_INACTIVE);
 8000a2c:	2040      	movs	r0, #64	; 0x40
 8000a2e:	f000 f8c9 	bl	8000bc4 <TIM_ForcedOC1Config>
    }
    BitsSentCounter++;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <RC5_Encode_SignalGenerate+0xb8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	3301      	adds	r3, #1
 8000a38:	b2da      	uxtb	r2, r3
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <RC5_Encode_SignalGenerate+0xb8>)
 8000a3c:	701a      	strb	r2, [r3, #0]
	TIM_ForcedOC1Config(TIM_OCMODE_FORCED_INACTIVE);

    /* TIM Disable */
    __HAL_TIM_DISABLE(&htim16);
  }
}
 8000a3e:	e026      	b.n	8000a8e <RC5_Encode_SignalGenerate+0xaa>
    RC5SendOpCompleteFlag = 0x01;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <RC5_Encode_SignalGenerate+0xc0>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim16);
 8000a46:	4819      	ldr	r0, [pc, #100]	; (8000aac <RC5_Encode_SignalGenerate+0xc8>)
 8000a48:	f002 fbb4 	bl	80031b4 <HAL_TIM_Base_Stop_IT>
    RC5SendOpReadyFlag = 0;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <RC5_Encode_SignalGenerate+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
    BitsSentCounter = 0;
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <RC5_Encode_SignalGenerate+0xb8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
	TIM_ForcedOC1Config(TIM_OCMODE_FORCED_INACTIVE);
 8000a58:	2040      	movs	r0, #64	; 0x40
 8000a5a:	f000 f8b3 	bl	8000bc4 <TIM_ForcedOC1Config>
    __HAL_TIM_DISABLE(&htim16);
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <RC5_Encode_SignalGenerate+0xc8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	6a1a      	ldr	r2, [r3, #32]
 8000a64:	f241 1311 	movw	r3, #4369	; 0x1111
 8000a68:	4013      	ands	r3, r2
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10f      	bne.n	8000a8e <RC5_Encode_SignalGenerate+0xaa>
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <RC5_Encode_SignalGenerate+0xc8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6a1a      	ldr	r2, [r3, #32]
 8000a74:	f240 4344 	movw	r3, #1092	; 0x444
 8000a78:	4013      	ands	r3, r2
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <RC5_Encode_SignalGenerate+0xaa>
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <RC5_Encode_SignalGenerate+0xc8>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <RC5_Encode_SignalGenerate+0xc8>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f022 0201 	bic.w	r2, r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000009c 	.word	0x2000009c
 8000a9c:	200000a2 	.word	0x200000a2
 8000aa0:	20000001 	.word	0x20000001
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	20000098 	.word	0x20000098
 8000aac:	200000d0 	.word	0x200000d0

08000ab0 <RC5_BinFrameGeneration>:
  * @param RC5_Instruction : Select the device instruction.
  * @param RC5_Ctrl : Select the device control bit status.
  * @retval Binary format of the RC5 Frame.
  */
static uint16_t RC5_BinFrameGeneration(uint8_t RC5_Address, uint8_t RC5_Instruction, RC5_Ctrl_t RC5_Ctrl)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	460b      	mov	r3, r1
 8000abc:	71bb      	strb	r3, [r7, #6]
 8000abe:	4613      	mov	r3, r2
 8000ac0:	80bb      	strh	r3, [r7, #4]
  uint16_t star1 = 0x2000;
 8000ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac6:	81bb      	strh	r3, [r7, #12]
  uint16_t star2 = 0x1000;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	81fb      	strh	r3, [r7, #14]
  uint16_t addr = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	817b      	strh	r3, [r7, #10]

  while (RC5SendOpCompleteFlag == 0x00)
 8000ad2:	bf00      	nop
 8000ad4:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <RC5_BinFrameGeneration+0x90>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d0fb      	beq.n	8000ad4 <RC5_BinFrameGeneration+0x24>
  {}

  /* Check if Instruction is 128-bit length */
  if (RC5_Instruction >= 64)
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae0:	d906      	bls.n	8000af0 <RC5_BinFrameGeneration+0x40>
  {
    /* Reset field bit: command is 7-bit length */
    star2 = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	81fb      	strh	r3, [r7, #14]
    /* Keep the lowest 6 bits of the command */
    RC5_Instruction &= 0x003F;
 8000ae6:	79bb      	ldrb	r3, [r7, #6]
 8000ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000aec:	71bb      	strb	r3, [r7, #6]
 8000aee:	e002      	b.n	8000af6 <RC5_BinFrameGeneration+0x46>
  }
  else /* Instruction is 64-bit length */
  {
    /* Set field bit: command is 6-bit length */
    star2 = 0x1000;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	81fb      	strh	r3, [r7, #14]
  }

  RC5SendOpReadyFlag = 0;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <RC5_BinFrameGeneration+0x94>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  RC5ManchesterFrameFormat = 0;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <RC5_BinFrameGeneration+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
  RC5BinaryFrameFormat = 0;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <RC5_BinFrameGeneration+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	801a      	strh	r2, [r3, #0]
  addr = ((uint16_t)(RC5_Address)) << 6;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	817b      	strh	r3, [r7, #10]
  RC5BinaryFrameFormat =  (star1) | (star2) | (RC5_Ctrl) | (addr) | (RC5_Instruction);
 8000b10:	89ba      	ldrh	r2, [r7, #12]
 8000b12:	89fb      	ldrh	r3, [r7, #14]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	88bb      	ldrh	r3, [r7, #4]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	897b      	ldrh	r3, [r7, #10]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <RC5_BinFrameGeneration+0x9c>)
 8000b2e:	801a      	strh	r2, [r3, #0]
  return (RC5BinaryFrameFormat);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <RC5_BinFrameGeneration+0x9c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	20000004 	.word	0x20000004
 8000b44:	2000009c 	.word	0x2000009c
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	20000094 	.word	0x20000094

08000b50 <RC5_ManchesterConvert>:
  * @brief Convert the RC5 frame from binary to Manchester Format.
  * @param RC5_BinaryFrameFormat : the RC5 frame in binary format.
  * @retval the RC5 frame in Manchester format.
  */
static uint32_t RC5_ManchesterConvert(uint16_t RC5_BinaryFrameFormat)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
  uint8_t i = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75fb      	strb	r3, [r7, #23]
  uint16_t Mask = 1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	81fb      	strh	r3, [r7, #14]
  uint16_t bit_format = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	81bb      	strh	r3, [r7, #12]
  uint32_t ConvertedMsg = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]

  for (i = 0; i < RC5RealFrameLength; i++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	75fb      	strb	r3, [r7, #23]
 8000b6e:	e01a      	b.n	8000ba6 <RC5_ManchesterConvert+0x56>
  {
    bit_format = ((((uint16_t)(RC5_BinaryFrameFormat)) >> i) & Mask) << i;
 8000b70:	88fa      	ldrh	r2, [r7, #6]
 8000b72:	7dfb      	ldrb	r3, [r7, #23]
 8000b74:	411a      	asrs	r2, r3
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	401a      	ands	r2, r3
 8000b7a:	7dfb      	ldrb	r3, [r7, #23]
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	81bb      	strh	r3, [r7, #12]
    ConvertedMsg = ConvertedMsg << 2;
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	613b      	str	r3, [r7, #16]

    if (bit_format != 0 ) /* Manchester 1 -|_  */
 8000b88:	89bb      	ldrh	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d004      	beq.n	8000b98 <RC5_ManchesterConvert+0x48>
    {
      ConvertedMsg |= RC5HIGHSTATE;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e003      	b.n	8000ba0 <RC5_ManchesterConvert+0x50>
    }
    else /* Manchester 0 _|-  */
    {
      ConvertedMsg |= RC5LOWSTATE;
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	613b      	str	r3, [r7, #16]
  for (i = 0; i < RC5RealFrameLength; i++)
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	75fb      	strb	r3, [r7, #23]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <RC5_ManchesterConvert+0x70>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	7dfa      	ldrb	r2, [r7, #23]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d3df      	bcc.n	8000b70 <RC5_ManchesterConvert+0x20>
    }
  }
  return (ConvertedMsg);
 8000bb0:	693b      	ldr	r3, [r7, #16]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <TIM_ForcedOC1Config>:
  * @brief  Force new configuration to the output channel
  * @param  action: new configuration
  * @retval None
  */
void TIM_ForcedOC1Config(uint32_t action)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t temporary = htim16.Instance->CCMR1;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <TIM_ForcedOC1Config+0x38>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	60fb      	str	r3, [r7, #12]

  temporary &= ~TIM_CCMR1_OC1M;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bde:	60fb      	str	r3, [r7, #12]
  temporary |= action;
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	60fb      	str	r3, [r7, #12]
  htim16.Instance->CCMR1 = temporary;
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <TIM_ForcedOC1Config+0x38>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	619a      	str	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	200000d0 	.word	0x200000d0

08000c00 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <MX_RTC_Init+0x4c>)
 8000c08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c12:	227f      	movs	r2, #127	; 0x7f
 8000c14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c18:	22ff      	movs	r2, #255	; 0xff
 8000c1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_RTC_Init+0x48>)
 8000c36:	f002 f87b 	bl	8002d30 <HAL_RTC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c40:	f7ff fd9a 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000a8 	.word	0x200000a8
 8000c4c:	40002800 	.word	0x40002800

08000c50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_RTC_MspInit+0x30>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d107      	bne.n	8000c72 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_RTC_MspInit+0x34>)
 8000c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c68:	4a06      	ldr	r2, [pc, #24]	; (8000c84 <HAL_RTC_MspInit+0x34>)
 8000c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40002800 	.word	0x40002800
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f9ec 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000d2a:	f002 fca0 	bl	800366e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000d0 	.word	0x200000d0

08000d38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e00a      	b.n	8000d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4a:	f3af 8000 	nop.w
 8000d4e:	4601      	mov	r1, r0
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf0      	blt.n	8000d4a <_read+0x12>
	}

return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	e009      	b.n	8000d98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1c5a      	adds	r2, r3, #1
 8000d88:	60ba      	str	r2, [r7, #8]
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fbed 	bl	800056c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	3301      	adds	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dbf1      	blt.n	8000d84 <_write+0x12>
	}
	return len;
 8000da0:	687b      	ldr	r3, [r7, #4]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_close>:

int _close(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return -1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <_isatty>:

int _isatty(int file)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b083      	sub	sp, #12
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
	return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f003 ffe6 	bl	8004e14 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20018000 	.word	0x20018000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	200000cc 	.word	0x200000cc
 8000e7c:	20000200 	.word	0x20000200

08000e80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <HAL_TIM_Base_MspInit>:
  HAL_TIM_MspPostInit(&htim17);

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_TIM_Base_MspInit+0x68>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d114      	bne.n	8000ee0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	4a15      	ldr	r2, [pc, #84]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2019      	movs	r0, #25
 8000ed4:	f000 fa0b 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ed8:	2019      	movs	r0, #25
 8000eda:	f000 fa24 	bl	8001326 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000ede:	e010      	b.n	8000f02 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM17)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <HAL_TIM_Base_MspInit+0x70>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d10b      	bne.n	8000f02 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_TIM_Base_MspInit+0x6c>)
 8000ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40014400 	.word	0x40014400
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40014800 	.word	0x40014800

08000f18 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f1e:	4a15      	ldr	r2, [pc, #84]	; (8000f74 <MX_USART2_UART_Init+0x5c>)
 8000f20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f3e:	220c      	movs	r2, #12
 8000f40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5a:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_USART2_UART_Init+0x58>)
 8000f5c:	f003 fa0f 	bl	800437e <HAL_UART_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f66:	f7ff fc07 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000168 	.word	0x20000168
 8000f74:	40004400 	.word	0x40004400

08000f78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_UART_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d128      	bne.n	8000fec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a16      	ldr	r2, [pc, #88]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a10      	ldr	r2, [pc, #64]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_UART_MspInit+0x80>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f000 f9b8 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff ff3e 	bl	8000e80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 fef9 	bl	8004e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fad9 	bl	80005e4 <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001034:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001040:	08005964 	.word	0x08005964
  ldr r2, =_sbss
 8001044:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001048:	20000200 	.word	0x20000200

0800104c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_2_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f93d 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	2000      	movs	r0, #0
 8001060:	f000 f80e 	bl	8001080 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fe0a 	bl	8000c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_InitTick+0x6c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d023      	beq.n	80010dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_InitTick+0x70>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <HAL_InitTick+0x6c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f949 	bl	8001342 <HAL_SYSTICK_Config>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10f      	bne.n	80010d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d809      	bhi.n	80010d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f913 	bl	80012ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x74>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e007      	b.n	80010e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e004      	b.n	80010e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e001      	b.n	80010e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000008 	.word	0x20000008
 80010f4:	2000000c 	.word	0x2000000c

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x20>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x24>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_IncTick+0x24>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000010 	.word	0x20000010
 800111c:	200001ec 	.word	0x200001ec

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200001ec 	.word	0x200001ec

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136a:	e17f      	b.n	800166c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	f000 8171 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d005      	beq.n	800139c <HAL_GPIO_Init+0x40>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d130      	bne.n	80013fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	2203      	movs	r2, #3
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013d2:	2201      	movs	r2, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	f003 0201 	and.w	r2, r3, #1
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	2b03      	cmp	r3, #3
 8001408:	d118      	bne.n	800143c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001410:	2201      	movs	r2, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	08db      	lsrs	r3, r3, #3
 8001426:	f003 0201 	and.w	r2, r3, #1
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b03      	cmp	r3, #3
 8001446:	d017      	beq.n	8001478 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689a      	ldr	r2, [r3, #8]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d123      	bne.n	80014cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	08da      	lsrs	r2, r3, #3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3208      	adds	r2, #8
 800148c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	220f      	movs	r2, #15
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	08da      	lsrs	r2, r3, #3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3208      	adds	r2, #8
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0203 	and.w	r2, r3, #3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80ac 	beq.w	8001666 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <HAL_GPIO_Init+0x330>)
 8001510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001512:	4a5e      	ldr	r2, [pc, #376]	; (800168c <HAL_GPIO_Init+0x330>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6613      	str	r3, [r2, #96]	; 0x60
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_GPIO_Init+0x330>)
 800151c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_GPIO_Init+0x334>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	220f      	movs	r2, #15
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x242>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	; (8001694 <HAL_GPIO_Init+0x338>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_GPIO_Init+0x33c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	; (800169c <HAL_GPIO_Init+0x340>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	; (80016a0 <HAL_GPIO_Init+0x344>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	; (80016a4 <HAL_GPIO_Init+0x348>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x22a>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_Init+0x244>
 800159e:	2300      	movs	r3, #0
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b0:	4937      	ldr	r1, [pc, #220]	; (8001690 <HAL_GPIO_Init+0x334>)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	089b      	lsrs	r3, r3, #2
 80015b6:	3302      	adds	r3, #2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015be:	4b3b      	ldr	r3, [pc, #236]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015e2:	4a32      	ldr	r2, [pc, #200]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e8:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x350>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_GPIO_Init+0x350>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43db      	mvns	r3, r3
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001660:	4a12      	ldr	r2, [pc, #72]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa22 f303 	lsr.w	r3, r2, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	f47f ae78 	bne.w	800136c <HAL_GPIO_Init+0x10>
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000
 8001694:	48000400 	.word	0x48000400
 8001698:	48000800 	.word	0x48000800
 800169c:	48000c00 	.word	0x48000c00
 80016a0:	48001000 	.word	0x48001000
 80016a4:	48001400 	.word	0x48001400
 80016a8:	48001800 	.word	0x48001800
 80016ac:	40010400 	.word	0x40010400

080016b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40007000 	.word	0x40007000

080016d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fa:	d130      	bne.n	800175e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016fc:	4b23      	ldr	r3, [pc, #140]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001708:	d038      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2232      	movs	r2, #50	; 0x32
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	4a1b      	ldr	r2, [pc, #108]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0c9b      	lsrs	r3, r3, #18
 800172c:	3301      	adds	r3, #1
 800172e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001730:	e002      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3b01      	subs	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001744:	d102      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f2      	bne.n	8001732 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001758:	d110      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e00f      	b.n	800177e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800176a:	d007      	beq.n	800177c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001774:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40007000 	.word	0x40007000
 8001790:	20000008 	.word	0x20000008
 8001794:	431bde83 	.word	0x431bde83

08001798 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3ca      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017aa:	4b97      	ldr	r3, [pc, #604]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017b4:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 80e4 	beq.w	8001994 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4a>
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b0c      	cmp	r3, #12
 80017d6:	f040 808b 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	f040 8087 	bne.w	80018f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017e2:	4b89      	ldr	r3, [pc, #548]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x62>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3a2      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x7c>
 800180a:	4b7f      	ldr	r3, [pc, #508]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001812:	e005      	b.n	8001820 <HAL_RCC_OscConfig+0x88>
 8001814:	4b7c      	ldr	r3, [pc, #496]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001820:	4293      	cmp	r3, r2
 8001822:	d223      	bcs.n	800186c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fd55 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e383      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001838:	4b73      	ldr	r3, [pc, #460]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a72      	ldr	r2, [pc, #456]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b70      	ldr	r3, [pc, #448]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	496d      	ldr	r1, [pc, #436]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001856:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	021b      	lsls	r3, r3, #8
 8001864:	4968      	ldr	r1, [pc, #416]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
 800186a:	e025      	b.n	80018b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186c:	4b66      	ldr	r3, [pc, #408]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a65      	ldr	r2, [pc, #404]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001872:	f043 0308 	orr.w	r3, r3, #8
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4960      	ldr	r1, [pc, #384]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188a:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	495b      	ldr	r1, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d109      	bne.n	80018b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 fd15 	bl	80022d8 <RCC_SetFlashLatencyFromMSIRange>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e343      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018b8:	f000 fc4a 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80018bc:	4602      	mov	r2, r0
 80018be:	4b52      	ldr	r3, [pc, #328]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4950      	ldr	r1, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x274>)
 80018ca:	5ccb      	ldrb	r3, [r1, r3]
 80018cc:	f003 031f 	and.w	r3, r3, #31
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_RCC_OscConfig+0x278>)
 80018d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018d8:	4b4e      	ldr	r3, [pc, #312]	; (8001a14 <HAL_RCC_OscConfig+0x27c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fbcf 	bl	8001080 <HAL_InitTick>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d052      	beq.n	8001992 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	e327      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d032      	beq.n	800195e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a42      	ldr	r2, [pc, #264]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001904:	f7ff fc0c 	bl	8001120 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800190c:	f7ff fc08 	bl	8001120 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e310      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191e:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a36      	ldr	r2, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4931      	ldr	r1, [pc, #196]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001948:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	021b      	lsls	r3, r3, #8
 8001956:	492c      	ldr	r1, [pc, #176]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
 800195c:	e01a      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196a:	f7ff fbd9 	bl	8001120 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001972:	f7ff fbd5 	bl	8001120 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e2dd      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001984:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x1da>
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001992:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b00      	cmp	r3, #0
 800199e:	d074      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x21a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	d10e      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d10b      	bne.n	80019ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d064      	beq.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d160      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e2ba      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x24a>
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	e026      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ea:	d115      	bne.n	8001a18 <HAL_RCC_OscConfig+0x280>
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a02      	ldr	r2, [pc, #8]	; (8001a08 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	e014      	b.n	8001a30 <HAL_RCC_OscConfig+0x298>
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	080058a8 	.word	0x080058a8
 8001a10:	20000008 	.word	0x20000008
 8001a14:	2000000c 	.word	0x2000000c
 8001a18:	4ba0      	ldr	r3, [pc, #640]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a9f      	ldr	r2, [pc, #636]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b9d      	ldr	r3, [pc, #628]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a9c      	ldr	r2, [pc, #624]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d013      	beq.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff fb72 	bl	8001120 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a40:	f7ff fb6e 	bl	8001120 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b64      	cmp	r3, #100	; 0x64
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e276      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a52:	4b92      	ldr	r3, [pc, #584]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2a8>
 8001a5e:	e014      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a60:	f7ff fb5e 	bl	8001120 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb5a 	bl	8001120 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	; 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e262      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x2d0>
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x310>
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d119      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d116      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aa8:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x328>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e23f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	061b      	lsls	r3, r3, #24
 8001ace:	4973      	ldr	r1, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e040      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d023      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ade:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fb19 	bl	8001120 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fb15 	bl	8001120 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e21d      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b04:	4b65      	ldr	r3, [pc, #404]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	495f      	ldr	r1, [pc, #380]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7ff faf5 	bl	8001120 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff faf1 	bl	8001120 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e1f9      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d03c      	beq.n	8001bde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b72:	4a4a      	ldr	r2, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fad0 	bl	8001120 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff facc 	bl	8001120 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1d4      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ef      	beq.n	8001b84 <HAL_RCC_OscConfig+0x3ec>
 8001ba4:	e01b      	b.n	8001bde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fab3 	bl	8001120 <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bbc:	e008      	b.n	8001bd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbe:	f7ff faaf 	bl	8001120 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d901      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	e1b7      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ef      	bne.n	8001bbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80a6 	beq.w	8001d38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bec:	2300      	movs	r3, #0
 8001bee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10d      	bne.n	8001c18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	; 0x58
 8001c08:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d118      	bne.n	8001c56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fa76 	bl	8001120 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c38:	f7ff fa72 	bl	8001120 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e17a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_RCC_OscConfig+0x508>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d8>
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6e:	e029      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b05      	cmp	r3, #5
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x50c>
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8e:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c98:	e014      	b.n	8001cc4 <HAL_RCC_OscConfig+0x52c>
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	4b9c      	ldr	r3, [pc, #624]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a9b      	ldr	r2, [pc, #620]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b98      	ldr	r3, [pc, #608]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a97      	ldr	r2, [pc, #604]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff fa28 	bl	8001120 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fa24 	bl	8001120 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e12a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b8b      	ldr	r3, [pc, #556]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x53c>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fa11 	bl	8001120 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fa0d 	bl	8001120 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e113      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a79      	ldr	r2, [pc, #484]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80fe 	beq.w	8001f3e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	f040 80d0 	bne.w	8001eec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d4c:	4b72      	ldr	r3, [pc, #456]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0203 	and.w	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d130      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d127      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11f      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d8c:	2a07      	cmp	r2, #7
 8001d8e:	bf14      	ite	ne
 8001d90:	2201      	movne	r2, #1
 8001d92:	2200      	moveq	r2, #0
 8001d94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d113      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da4:	085b      	lsrs	r3, r3, #1
 8001da6:	3b01      	subs	r3, #1
 8001da8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d06e      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d069      	beq.n	8001e9c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dc8:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0ad      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001de4:	4b4c      	ldr	r3, [pc, #304]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a4b      	ldr	r2, [pc, #300]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001df0:	f7ff f996 	bl	8001120 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff f992 	bl	8001120 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e09a      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e0a:	4b43      	ldr	r3, [pc, #268]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e16:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_OscConfig+0x784>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e26:	3a01      	subs	r2, #1
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	4311      	orrs	r1, r2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e30:	0212      	lsls	r2, r2, #8
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	3a01      	subs	r2, #1
 8001e3c:	0552      	lsls	r2, r2, #21
 8001e3e:	4311      	orrs	r1, r2
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e44:	0852      	lsrs	r2, r2, #1
 8001e46:	3a01      	subs	r2, #1
 8001e48:	0652      	lsls	r2, r2, #25
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e50:	0912      	lsrs	r2, r2, #4
 8001e52:	0452      	lsls	r2, r2, #17
 8001e54:	430a      	orrs	r2, r1
 8001e56:	4930      	ldr	r1, [pc, #192]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e5c:	4b2e      	ldr	r3, [pc, #184]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2d      	ldr	r2, [pc, #180]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e72:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e74:	f7ff f954 	bl	8001120 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e7c:	f7ff f950 	bl	8001120 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e058      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e9a:	e050      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e04f      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d148      	bne.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a19      	ldr	r2, [pc, #100]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a16      	ldr	r2, [pc, #88]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ec4:	f7ff f92c 	bl	8001120 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f928 	bl	8001120 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e030      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x734>
 8001eea:	e028      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	d023      	beq.n	8001f3a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_RCC_OscConfig+0x780>)
 8001ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f90f 	bl	8001120 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	e00c      	b.n	8001f20 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7ff f90b 	bl	8001120 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d905      	bls.n	8001f20 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e013      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	4905      	ldr	r1, [pc, #20]	; (8001f48 <HAL_RCC_OscConfig+0x7b0>)
 8001f32:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <HAL_RCC_OscConfig+0x7b4>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
 8001f38:	e001      	b.n	8001f3e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	feeefffc 	.word	0xfeeefffc

08001f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0e7      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4970      	ldr	r1, [pc, #448]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b6e      	ldr	r3, [pc, #440]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0cf      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	4b66      	ldr	r3, [pc, #408]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d908      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	4960      	ldr	r1, [pc, #384]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d121      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0a6      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fee:	4b54      	ldr	r3, [pc, #336]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e09a      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d107      	bne.n	8002016 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002006:	4b4e      	ldr	r3, [pc, #312]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d109      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e086      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002026:	4b46      	ldr	r3, [pc, #280]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f023 0203 	bic.w	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	4943      	ldr	r1, [pc, #268]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002038:	f7ff f872 	bl	8001120 <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203e:	e00a      	b.n	8002056 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002040:	f7ff f86e 	bl	8001120 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	f241 3288 	movw	r2, #5000	; 0x1388
 800204e:	4293      	cmp	r3, r2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e06e      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	4b3a      	ldr	r3, [pc, #232]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 020c 	and.w	r2, r3, #12
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	429a      	cmp	r2, r3
 8002066:	d1eb      	bne.n	8002040 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b2e      	ldr	r3, [pc, #184]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	492b      	ldr	r1, [pc, #172]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d210      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 0207 	bic.w	r2, r3, #7
 80020ac:	4923      	ldr	r1, [pc, #140]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <HAL_RCC_ClockConfig+0x1ec>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e036      	b.n	8002134 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d2:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4918      	ldr	r1, [pc, #96]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4910      	ldr	r1, [pc, #64]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002104:	f000 f824 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_RCC_ClockConfig+0x1f0>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	490b      	ldr	r1, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1f4>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1fc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe ffa9 	bl	8001080 <HAL_InitTick>
 800212e:	4603      	mov	r3, r0
 8002130:	72fb      	strb	r3, [r7, #11]

  return status;
 8002132:	7afb      	ldrb	r3, [r7, #11]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	080058a8 	.word	0x080058a8
 8002148:	20000008 	.word	0x20000008
 800214c:	2000000c 	.word	0x2000000c

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	; 0x24
 8002154:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 030c 	and.w	r3, r3, #12
 8002166:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002168:	4b3b      	ldr	r3, [pc, #236]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d005      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x34>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d121      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d11e      	bne.n	80021c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d107      	bne.n	80021a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002190:	4b31      	ldr	r3, [pc, #196]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e005      	b.n	80021ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a0:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021ac:	4a2b      	ldr	r2, [pc, #172]	; (800225c <HAL_RCC_GetSysClockFreq+0x10c>)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d102      	bne.n	80021ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021c8:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ca:	61bb      	str	r3, [r7, #24]
 80021cc:	e004      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d4:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	d134      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021de:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d003      	beq.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d003      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0xac>
 80021f4:	e005      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f8:	617b      	str	r3, [r7, #20]
      break;
 80021fa:	e005      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	617b      	str	r3, [r7, #20]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	617b      	str	r3, [r7, #20]
      break;
 8002206:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	3301      	adds	r3, #1
 8002214:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	fb03 f202 	mul.w	r2, r3, r2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	fbb2 f3f3 	udiv	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	0e5b      	lsrs	r3, r3, #25
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	3301      	adds	r3, #1
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002248:	69bb      	ldr	r3, [r7, #24]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	; 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	080058c0 	.word	0x080058c0
 8002260:	00f42400 	.word	0x00f42400
 8002264:	007a1200 	.word	0x007a1200

08002268 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_RCC_GetHCLKFreq+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008

08002280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002284:	f7ff fff0 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 8002288:	4602      	mov	r2, r0
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	4904      	ldr	r1, [pc, #16]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002296:	5ccb      	ldrb	r3, [r1, r3]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	080058b8 	.word	0x080058b8

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022b0:	f7ff ffda 	bl	8002268 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000
 80022d4:	080058b8 	.word	0x080058b8

080022d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022f0:	f7ff f9ee 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 80022f4:	6178      	str	r0, [r7, #20]
 80022f6:	e014      	b.n	8002322 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	4a24      	ldr	r2, [pc, #144]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002302:	6593      	str	r3, [r2, #88]	; 0x58
 8002304:	4b22      	ldr	r3, [pc, #136]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002310:	f7ff f9de 	bl	80016d0 <HAL_PWREx_GetVoltageRange>
 8002314:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800231c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002328:	d10b      	bne.n	8002342 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d919      	bls.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2ba0      	cmp	r3, #160	; 0xa0
 8002334:	d902      	bls.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002336:	2302      	movs	r3, #2
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	e013      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800233c:	2301      	movs	r3, #1
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	e010      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b80      	cmp	r3, #128	; 0x80
 8002346:	d902      	bls.n	800234e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002348:	2303      	movs	r3, #3
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e00a      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b80      	cmp	r3, #128	; 0x80
 8002352:	d102      	bne.n	800235a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002354:	2302      	movs	r3, #2
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	e004      	b.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d101      	bne.n	8002364 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f023 0207 	bic.w	r2, r3, #7
 800236c:	4909      	ldr	r1, [pc, #36]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002374:	4b07      	ldr	r3, [pc, #28]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000
 8002394:	40022000 	.word	0x40022000

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023a0:	2300      	movs	r3, #0
 80023a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023a4:	2300      	movs	r3, #0
 80023a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d041      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023bc:	d02a      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023c2:	d824      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ce:	d81e      	bhi.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d00a      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d8:	d010      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023da:	e018      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023dc:	4b86      	ldr	r3, [pc, #536]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4a85      	ldr	r2, [pc, #532]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023e8:	e015      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 facb 	bl	800298c <RCCEx_PLLSAI1_Config>
 80023f6:	4603      	mov	r3, r0
 80023f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023fa:	e00c      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3320      	adds	r3, #32
 8002400:	2100      	movs	r1, #0
 8002402:	4618      	mov	r0, r3
 8002404:	f000 fbb6 	bl	8002b74 <RCCEx_PLLSAI2_Config>
 8002408:	4603      	mov	r3, r0
 800240a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800240c:	e003      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	74fb      	strb	r3, [r7, #19]
      break;
 8002412:	e000      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10b      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800241c:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800242a:	4973      	ldr	r1, [pc, #460]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002432:	e001      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d041      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800244c:	d02a      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800244e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002452:	d824      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002458:	d008      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800245a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800245e:	d81e      	bhi.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d010      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800246a:	e018      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800246c:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002478:	e015      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3304      	adds	r3, #4
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f000 fa83 	bl	800298c <RCCEx_PLLSAI1_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800248a:	e00c      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3320      	adds	r3, #32
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fb6e 	bl	8002b74 <RCCEx_PLLSAI2_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800249c:	e003      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	74fb      	strb	r3, [r7, #19]
      break;
 80024a2:	e000      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024a6:	7cfb      	ldrb	r3, [r7, #19]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024ac:	4b52      	ldr	r3, [pc, #328]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ba:	494f      	ldr	r1, [pc, #316]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024c2:	e001      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a0 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d6:	2300      	movs	r3, #0
 80024d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024da:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fa:	6593      	str	r3, [r2, #88]	; 0x58
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002508:	2301      	movs	r3, #1
 800250a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a3a      	ldr	r2, [pc, #232]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002518:	f7fe fe02 	bl	8001120 <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800251e:	e009      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fdfe 	bl	8001120 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d902      	bls.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	74fb      	strb	r3, [r7, #19]
        break;
 8002532:	e005      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002534:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0ef      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002550:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01f      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	429a      	cmp	r2, r3
 8002562:	d019      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800256e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002570:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a2:	f7fe fdbd 	bl	8001120 <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a8:	e00b      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025aa:	f7fe fdb9 	bl	8001120 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d902      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	74fb      	strb	r3, [r7, #19]
            break;
 80025c0:	e006      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ec      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025d0:	7cfb      	ldrb	r3, [r7, #19]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e6:	4904      	ldr	r1, [pc, #16]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025ee:	e009      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025f0:	7cfb      	ldrb	r3, [r7, #19]
 80025f2:	74bb      	strb	r3, [r7, #18]
 80025f4:	e006      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	7cfb      	ldrb	r3, [r7, #19]
 8002602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002604:	7c7b      	ldrb	r3, [r7, #17]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260a:	4b9e      	ldr	r3, [pc, #632]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	4a9d      	ldr	r2, [pc, #628]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002614:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002622:	4b98      	ldr	r3, [pc, #608]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002628:	f023 0203 	bic.w	r2, r3, #3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	4994      	ldr	r1, [pc, #592]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002644:	4b8f      	ldr	r3, [pc, #572]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f023 020c 	bic.w	r2, r3, #12
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002652:	498c      	ldr	r1, [pc, #560]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002666:	4b87      	ldr	r3, [pc, #540]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4983      	ldr	r1, [pc, #524]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002688:	4b7e      	ldr	r3, [pc, #504]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	497b      	ldr	r1, [pc, #492]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	4972      	ldr	r1, [pc, #456]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	496a      	ldr	r1, [pc, #424]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	4961      	ldr	r1, [pc, #388]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002710:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271e:	4959      	ldr	r1, [pc, #356]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002732:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002738:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	4950      	ldr	r1, [pc, #320]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	4948      	ldr	r1, [pc, #288]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	493f      	ldr	r1, [pc, #252]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d028      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027a6:	4937      	ldr	r1, [pc, #220]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b6:	d106      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c2:	60d3      	str	r3, [r2, #12]
 80027c4:	e011      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ce:	d10c      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3304      	adds	r3, #4
 80027d4:	2101      	movs	r1, #1
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f8d8 	bl	800298c <RCCEx_PLLSAI1_Config>
 80027dc:	4603      	mov	r3, r0
 80027de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d028      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002804:	491f      	ldr	r1, [pc, #124]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d106      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002820:	60d3      	str	r3, [r2, #12]
 8002822:	e011      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282c:	d10c      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f000 f8a9 	bl	800298c <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02b      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002872:	d109      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b03      	ldr	r3, [pc, #12]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a02      	ldr	r2, [pc, #8]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
 8002880:	e014      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002890:	d10c      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3304      	adds	r3, #4
 8002896:	2101      	movs	r1, #1
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f877 	bl	800298c <RCCEx_PLLSAI1_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a2:	7cfb      	ldrb	r3, [r7, #19]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02f      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028c6:	4928      	ldr	r1, [pc, #160]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028d6:	d10d      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3304      	adds	r3, #4
 80028dc:	2102      	movs	r1, #2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 f854 	bl	800298c <RCCEx_PLLSAI1_Config>
 80028e4:	4603      	mov	r3, r0
 80028e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d014      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ee:	7cfb      	ldrb	r3, [r7, #19]
 80028f0:	74bb      	strb	r3, [r7, #18]
 80028f2:	e011      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3320      	adds	r3, #32
 8002902:	2102      	movs	r1, #2
 8002904:	4618      	mov	r0, r3
 8002906:	f000 f935 	bl	8002b74 <RCCEx_PLLSAI2_Config>
 800290a:	4603      	mov	r3, r0
 800290c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002914:	7cfb      	ldrb	r3, [r7, #19]
 8002916:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002924:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	490d      	ldr	r1, [pc, #52]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002956:	4904      	ldr	r1, [pc, #16]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800295e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40021000 	.word	0x40021000

0800296c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002976:	f043 0304 	orr.w	r3, r3, #4
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40021000 	.word	0x40021000

0800298c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800299a:	4b75      	ldr	r3, [pc, #468]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029a6:	4b72      	ldr	r3, [pc, #456]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0203 	and.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10d      	bne.n	80029d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029be:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	091b      	lsrs	r3, r3, #4
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
       ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d047      	beq.n	8002a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
 80029d6:	e044      	b.n	8002a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d018      	beq.n	8002a12 <RCCEx_PLLSAI1_Config+0x86>
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d825      	bhi.n	8002a30 <RCCEx_PLLSAI1_Config+0xa4>
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d002      	beq.n	80029ee <RCCEx_PLLSAI1_Config+0x62>
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d009      	beq.n	8002a00 <RCCEx_PLLSAI1_Config+0x74>
 80029ec:	e020      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ee:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d11d      	bne.n	8002a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fe:	e01a      	b.n	8002a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a00:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d116      	bne.n	8002a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a10:	e013      	b.n	8002a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a12:	4b57      	ldr	r3, [pc, #348]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a1e:	4b54      	ldr	r3, [pc, #336]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a2e:	e006      	b.n	8002a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      break;
 8002a34:	e004      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a36:	bf00      	nop
 8002a38:	e002      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10d      	bne.n	8002a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a46:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	430b      	orrs	r3, r1
 8002a5c:	4944      	ldr	r1, [pc, #272]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d17d      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a68:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a40      	ldr	r2, [pc, #256]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a74:	f7fe fb54 	bl	8001120 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a7a:	e009      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a7c:	f7fe fb50 	bl	8001120 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a8e:	e005      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a90:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1ef      	bne.n	8002a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d160      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d111      	bne.n	8002acc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002aa8:	4b31      	ldr	r3, [pc, #196]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	0211      	lsls	r1, r2, #8
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	68d2      	ldr	r2, [r2, #12]
 8002abe:	0912      	lsrs	r2, r2, #4
 8002ac0:	0452      	lsls	r2, r2, #17
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	492a      	ldr	r1, [pc, #168]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	610b      	str	r3, [r1, #16]
 8002aca:	e027      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d112      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad2:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ada:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6892      	ldr	r2, [r2, #8]
 8002ae2:	0211      	lsls	r1, r2, #8
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6912      	ldr	r2, [r2, #16]
 8002ae8:	0852      	lsrs	r2, r2, #1
 8002aea:	3a01      	subs	r2, #1
 8002aec:	0552      	lsls	r2, r2, #21
 8002aee:	430a      	orrs	r2, r1
 8002af0:	491f      	ldr	r1, [pc, #124]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	610b      	str	r3, [r1, #16]
 8002af6:	e011      	b.n	8002b1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6892      	ldr	r2, [r2, #8]
 8002b08:	0211      	lsls	r1, r2, #8
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	6952      	ldr	r2, [r2, #20]
 8002b0e:	0852      	lsrs	r2, r2, #1
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0652      	lsls	r2, r2, #25
 8002b14:	430a      	orrs	r2, r1
 8002b16:	4916      	ldr	r1, [pc, #88]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a13      	ldr	r2, [pc, #76]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fafa 	bl	8001120 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b2e:	e009      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b30:	f7fe faf6 	bl	8001120 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d902      	bls.n	8002b44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	73fb      	strb	r3, [r7, #15]
          break;
 8002b42:	e005      	b.n	8002b50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ef      	beq.n	8002b30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b56:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	4904      	ldr	r1, [pc, #16]	; (8002b70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b82:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d018      	beq.n	8002bc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0203 	and.w	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d10d      	bne.n	8002bba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
       ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d047      	beq.n	8002c4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e044      	b.n	8002c4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d018      	beq.n	8002bfa <RCCEx_PLLSAI2_Config+0x86>
 8002bc8:	2b03      	cmp	r3, #3
 8002bca:	d825      	bhi.n	8002c18 <RCCEx_PLLSAI2_Config+0xa4>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d002      	beq.n	8002bd6 <RCCEx_PLLSAI2_Config+0x62>
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d009      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x74>
 8002bd4:	e020      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bd6:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002be6:	e01a      	b.n	8002c1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002be8:	4b50      	ldr	r3, [pc, #320]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d116      	bne.n	8002c22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf8:	e013      	b.n	8002c22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10f      	bne.n	8002c26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d109      	bne.n	8002c26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c16:	e006      	b.n	8002c26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1c:	e004      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c1e:	bf00      	nop
 8002c20:	e002      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c2e:	4b3f      	ldr	r3, [pc, #252]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6819      	ldr	r1, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	430b      	orrs	r3, r1
 8002c44:	4939      	ldr	r1, [pc, #228]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d167      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a35      	ldr	r2, [pc, #212]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fa60 	bl	8001120 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c64:	f7fe fa5c 	bl	8001120 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
        break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ef      	bne.n	8002c64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d14a      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d111      	bne.n	8002cb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	0211      	lsls	r1, r2, #8
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	68d2      	ldr	r2, [r2, #12]
 8002ca6:	0912      	lsrs	r2, r2, #4
 8002ca8:	0452      	lsls	r2, r2, #17
 8002caa:	430a      	orrs	r2, r1
 8002cac:	491f      	ldr	r1, [pc, #124]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	614b      	str	r3, [r1, #20]
 8002cb2:	e011      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb4:	4b1d      	ldr	r3, [pc, #116]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002cbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	0211      	lsls	r1, r2, #8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6912      	ldr	r2, [r2, #16]
 8002cca:	0852      	lsrs	r2, r2, #1
 8002ccc:	3a01      	subs	r2, #1
 8002cce:	0652      	lsls	r2, r2, #25
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	4916      	ldr	r1, [pc, #88]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a13      	ldr	r2, [pc, #76]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fa1c 	bl	8001120 <HAL_GetTick>
 8002ce8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cea:	e009      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cec:	f7fe fa18 	bl	8001120 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d902      	bls.n	8002d00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002cfe:	e005      	b.n	8002d0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	4904      	ldr	r1, [pc, #16]	; (8002d2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000

08002d30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d06c      	beq.n	8002e1c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd ff7a 	bl	8000c50 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22ca      	movs	r2, #202	; 0xca
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2253      	movs	r2, #83	; 0x53
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f87c 	bl	8002e72 <RTC_EnterInitMode>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d14b      	bne.n	8002e1c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d96:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6899      	ldr	r1, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68d2      	ldr	r2, [r2, #12]
 8002dbe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6919      	ldr	r1, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	041a      	lsls	r2, r3, #16
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f87f 	bl	8002ed8 <RTC_ExitInitMode>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d11b      	bne.n	8002e1c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0203 	bic.w	r2, r2, #3
 8002df2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	22ff      	movs	r2, #255	; 0xff
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b084      	sub	sp, #16
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e3c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002e3e:	f7fe f96f 	bl	8001120 <HAL_GetTick>
 8002e42:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e44:	e009      	b.n	8002e5a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e46:	f7fe f96b 	bl	8001120 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e54:	d901      	bls.n	8002e5a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e007      	b.n	8002e6a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d120      	bne.n	8002ece <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e96:	f7fe f943 	bl	8001120 <HAL_GetTick>
 8002e9a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e9c:	e00d      	b.n	8002eba <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e9e:	f7fe f93f 	bl	8001120 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eac:	d905      	bls.n	8002eba <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <RTC_EnterInitMode+0x5c>
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d1e7      	bne.n	8002e9e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002eea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ef0:	4b17      	ldr	r3, [pc, #92]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff92 	bl	8002e26 <HAL_RTC_WaitForSynchro>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01e      	beq.n	8002f46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e017      	b.n	8002f46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002f1c:	f023 0320 	bic.w	r3, r3, #32
 8002f20:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff7f 	bl	8002e26 <HAL_RTC_WaitForSynchro>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <RTC_ExitInitMode+0x78>)
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40002800 	.word	0x40002800

08002f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e049      	b.n	8002ffa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7fd ff92 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f000 fe40 	bl	8003c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d001      	beq.n	800301c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e047      	b.n	80030ac <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_TIM_Base_Start+0xb4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01d      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d018      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1f      	ldr	r2, [pc, #124]	; (80030bc <HAL_TIM_Base_Start+0xb8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_TIM_Base_Start+0xbc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <HAL_TIM_Base_Start+0xc0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIM_Base_Start+0xc4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIM_Base_Start+0x66>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <HAL_TIM_Base_Start+0xc8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d115      	bne.n	8003096 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <HAL_TIM_Base_Start+0xcc>)
 8003072:	4013      	ands	r3, r2
 8003074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b06      	cmp	r3, #6
 800307a:	d015      	beq.n	80030a8 <HAL_TIM_Base_Start+0xa4>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003082:	d011      	beq.n	80030a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f042 0201 	orr.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	e008      	b.n	80030a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	e000      	b.n	80030aa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40000400 	.word	0x40000400
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40000c00 	.word	0x40000c00
 80030c8:	40013400 	.word	0x40013400
 80030cc:	40014000 	.word	0x40014000
 80030d0:	00010007 	.word	0x00010007

080030d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04f      	b.n	800318c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a23      	ldr	r2, [pc, #140]	; (8003198 <HAL_TIM_Base_Start_IT+0xc4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01d      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003116:	d018      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	; (800319c <HAL_TIM_Base_Start_IT+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	; (80031a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	; (80031a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIM_Base_Start_IT+0x76>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d115      	bne.n	8003176 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003152:	4013      	ands	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b06      	cmp	r3, #6
 800315a:	d015      	beq.n	8003188 <HAL_TIM_Base_Start_IT+0xb4>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003162:	d011      	beq.n	8003188 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	e008      	b.n	8003188 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e000      	b.n	800318a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40013400 	.word	0x40013400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	00010007 	.word	0x00010007

080031b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	f240 4344 	movw	r3, #1092	; 0x444
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e049      	b.n	80032b8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f89d 	bl	8003378 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f000 fce1 	bl	8003c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2202      	movs	r2, #2
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a1a      	ldr	r2, [r3, #32]
 80032d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <HAL_TIM_OC_DeInit+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6a1a      	ldr	r2, [r3, #32]
 80032e6:	f240 4344 	movw	r3, #1092	; 0x444
 80032ea:	4013      	ands	r3, r2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_OC_DeInit+0x40>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f843 	bl	800338c <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_TIM_OC_Start+0x24>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e03c      	b.n	800343e <HAL_TIM_OC_Start+0x9e>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d109      	bne.n	80033de <HAL_TIM_OC_Start+0x3e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e02f      	b.n	800343e <HAL_TIM_OC_Start+0x9e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d109      	bne.n	80033f8 <HAL_TIM_OC_Start+0x58>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e022      	b.n	800343e <HAL_TIM_OC_Start+0x9e>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d109      	bne.n	8003412 <HAL_TIM_OC_Start+0x72>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e015      	b.n	800343e <HAL_TIM_OC_Start+0x9e>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b10      	cmp	r3, #16
 8003416:	d109      	bne.n	800342c <HAL_TIM_OC_Start+0x8c>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b01      	cmp	r3, #1
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e008      	b.n	800343e <HAL_TIM_OC_Start+0x9e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b01      	cmp	r3, #1
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e09c      	b.n	8003580 <HAL_TIM_OC_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <HAL_TIM_OC_Start+0xb6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003454:	e023      	b.n	800349e <HAL_TIM_OC_Start+0xfe>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b04      	cmp	r3, #4
 800345a:	d104      	bne.n	8003466 <HAL_TIM_OC_Start+0xc6>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	e01b      	b.n	800349e <HAL_TIM_OC_Start+0xfe>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b08      	cmp	r3, #8
 800346a:	d104      	bne.n	8003476 <HAL_TIM_OC_Start+0xd6>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003474:	e013      	b.n	800349e <HAL_TIM_OC_Start+0xfe>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d104      	bne.n	8003486 <HAL_TIM_OC_Start+0xe6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003484:	e00b      	b.n	800349e <HAL_TIM_OC_Start+0xfe>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b10      	cmp	r3, #16
 800348a:	d104      	bne.n	8003496 <HAL_TIM_OC_Start+0xf6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003494:	e003      	b.n	800349e <HAL_TIM_OC_Start+0xfe>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 ff26 	bl	80042f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a35      	ldr	r2, [pc, #212]	; (8003588 <HAL_TIM_OC_Start+0x1e8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_TIM_OC_Start+0x13e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a34      	ldr	r2, [pc, #208]	; (800358c <HAL_TIM_OC_Start+0x1ec>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_OC_Start+0x13e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a32      	ldr	r2, [pc, #200]	; (8003590 <HAL_TIM_OC_Start+0x1f0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_OC_Start+0x13e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_TIM_OC_Start+0x1f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_OC_Start+0x13e>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <HAL_TIM_OC_Start+0x1f8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_OC_Start+0x142>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_TIM_OC_Start+0x144>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_OC_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <HAL_TIM_OC_Start+0x1e8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01d      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350a:	d018      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_TIM_OC_Start+0x1fc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d013      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_TIM_OC_Start+0x200>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d00e      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_TIM_OC_Start+0x204>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a17      	ldr	r2, [pc, #92]	; (800358c <HAL_TIM_OC_Start+0x1ec>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_TIM_OC_Start+0x19e>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <HAL_TIM_OC_Start+0x1f0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d115      	bne.n	800356a <HAL_TIM_OC_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <HAL_TIM_OC_Start+0x208>)
 8003546:	4013      	ands	r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d015      	beq.n	800357c <HAL_TIM_OC_Start+0x1dc>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003556:	d011      	beq.n	800357c <HAL_TIM_OC_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	e008      	b.n	800357c <HAL_TIM_OC_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0201 	orr.w	r2, r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e000      	b.n	800357e <HAL_TIM_OC_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40012c00 	.word	0x40012c00
 800358c:	40013400 	.word	0x40013400
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00
 80035a8:	00010007 	.word	0x00010007

080035ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e049      	b.n	8003652 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f841 	bl	800365a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3304      	adds	r3, #4
 80035e8:	4619      	mov	r1, r3
 80035ea:	4610      	mov	r0, r2
 80035ec:	f000 fb14 	bl	8003c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d122      	bne.n	80036ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d11b      	bne.n	80036ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0202 	mvn.w	r2, #2
 800369a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0303 	and.w	r3, r3, #3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fa93 	bl	8003bdc <HAL_TIM_IC_CaptureCallback>
 80036b6:	e005      	b.n	80036c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fa85 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa96 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d122      	bne.n	800371e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d11b      	bne.n	800371e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f06f 0204 	mvn.w	r2, #4
 80036ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa69 	bl	8003bdc <HAL_TIM_IC_CaptureCallback>
 800370a:	e005      	b.n	8003718 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 fa5b 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fa6c 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b08      	cmp	r3, #8
 800372a:	d122      	bne.n	8003772 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d11b      	bne.n	8003772 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f06f 0208 	mvn.w	r2, #8
 8003742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa3f 	bl	8003bdc <HAL_TIM_IC_CaptureCallback>
 800375e:	e005      	b.n	800376c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fa31 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fa42 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b10      	cmp	r3, #16
 800377e:	d122      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b10      	cmp	r3, #16
 800378c:	d11b      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f06f 0210 	mvn.w	r2, #16
 8003796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2208      	movs	r2, #8
 800379c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fa15 	bl	8003bdc <HAL_TIM_IC_CaptureCallback>
 80037b2:	e005      	b.n	80037c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa07 	bl	8003bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa18 	bl	8003bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10e      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0201 	mvn.w	r2, #1
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7fc fedd 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d10e      	bne.n	800381e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d107      	bne.n	800381e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fd9c 	bl	8004356 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800382c:	d10e      	bne.n	800384c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003838:	2b80      	cmp	r3, #128	; 0x80
 800383a:	d107      	bne.n	800384c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fd8f 	bl	800436a <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d10e      	bne.n	8003878 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d107      	bne.n	8003878 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9c6 	bl	8003c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b20      	cmp	r3, #32
 8003884:	d10e      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b20      	cmp	r3, #32
 8003892:	d107      	bne.n	80038a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f06f 0220 	mvn.w	r2, #32
 800389c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fd4f 	bl	8004342 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e066      	b.n	8003998 <HAL_TIM_OC_ConfigChannel+0xec>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b14      	cmp	r3, #20
 80038d6:	d857      	bhi.n	8003988 <HAL_TIM_OC_ConfigChannel+0xdc>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003935 	.word	0x08003935
 80038e4:	08003989 	.word	0x08003989
 80038e8:	08003989 	.word	0x08003989
 80038ec:	08003989 	.word	0x08003989
 80038f0:	08003943 	.word	0x08003943
 80038f4:	08003989 	.word	0x08003989
 80038f8:	08003989 	.word	0x08003989
 80038fc:	08003989 	.word	0x08003989
 8003900:	08003951 	.word	0x08003951
 8003904:	08003989 	.word	0x08003989
 8003908:	08003989 	.word	0x08003989
 800390c:	08003989 	.word	0x08003989
 8003910:	0800395f 	.word	0x0800395f
 8003914:	08003989 	.word	0x08003989
 8003918:	08003989 	.word	0x08003989
 800391c:	08003989 	.word	0x08003989
 8003920:	0800396d 	.word	0x0800396d
 8003924:	08003989 	.word	0x08003989
 8003928:	08003989 	.word	0x08003989
 800392c:	08003989 	.word	0x08003989
 8003930:	0800397b 	.word	0x0800397b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68b9      	ldr	r1, [r7, #8]
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fa06 	bl	8003d4c <TIM_OC1_SetConfig>
      break;
 8003940:	e025      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fa8f 	bl	8003e6c <TIM_OC2_SetConfig>
      break;
 800394e:	e01e      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fb12 	bl	8003f80 <TIM_OC3_SetConfig>
      break;
 800395c:	e017      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fb93 	bl	8004090 <TIM_OC4_SetConfig>
      break;
 800396a:	e010      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fbf6 	bl	8004164 <TIM_OC5_SetConfig>
      break;
 8003978:	e009      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fc53 	bl	800422c <TIM_OC6_SetConfig>
      break;
 8003986:	e002      	b.n	800398e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      break;
 800398c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003996:	7dfb      	ldrb	r3, [r7, #23]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ac:	2300      	movs	r3, #0
 80039ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e0ff      	b.n	8003bbe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b14      	cmp	r3, #20
 80039ca:	f200 80f0 	bhi.w	8003bae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003baf 	.word	0x08003baf
 80039dc:	08003baf 	.word	0x08003baf
 80039e0:	08003baf 	.word	0x08003baf
 80039e4:	08003a69 	.word	0x08003a69
 80039e8:	08003baf 	.word	0x08003baf
 80039ec:	08003baf 	.word	0x08003baf
 80039f0:	08003baf 	.word	0x08003baf
 80039f4:	08003aab 	.word	0x08003aab
 80039f8:	08003baf 	.word	0x08003baf
 80039fc:	08003baf 	.word	0x08003baf
 8003a00:	08003baf 	.word	0x08003baf
 8003a04:	08003aeb 	.word	0x08003aeb
 8003a08:	08003baf 	.word	0x08003baf
 8003a0c:	08003baf 	.word	0x08003baf
 8003a10:	08003baf 	.word	0x08003baf
 8003a14:	08003b2d 	.word	0x08003b2d
 8003a18:	08003baf 	.word	0x08003baf
 8003a1c:	08003baf 	.word	0x08003baf
 8003a20:	08003baf 	.word	0x08003baf
 8003a24:	08003b6d 	.word	0x08003b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f98c 	bl	8003d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	699a      	ldr	r2, [r3, #24]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6999      	ldr	r1, [r3, #24]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	619a      	str	r2, [r3, #24]
      break;
 8003a66:	e0a5      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f9fc 	bl	8003e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	021a      	lsls	r2, r3, #8
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]
      break;
 8003aa8:	e084      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fa65 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69da      	ldr	r2, [r3, #28]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0208 	orr.w	r2, r2, #8
 8003ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	69da      	ldr	r2, [r3, #28]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0204 	bic.w	r2, r2, #4
 8003ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69d9      	ldr	r1, [r3, #28]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      break;
 8003ae8:	e064      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 facd 	bl	8004090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	021a      	lsls	r2, r3, #8
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	61da      	str	r2, [r3, #28]
      break;
 8003b2a:	e043      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb16 	bl	8004164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0208 	orr.w	r2, r2, #8
 8003b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0204 	bic.w	r2, r2, #4
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b6a:	e023      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fb5a 	bl	800422c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bac:	e002      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop

08003bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <TIM_Base_SetConfig+0x114>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <TIM_Base_SetConfig+0x40>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c36:	d00f      	beq.n	8003c58 <TIM_Base_SetConfig+0x40>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a3d      	ldr	r2, [pc, #244]	; (8003d30 <TIM_Base_SetConfig+0x118>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <TIM_Base_SetConfig+0x40>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <TIM_Base_SetConfig+0x11c>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d007      	beq.n	8003c58 <TIM_Base_SetConfig+0x40>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a3b      	ldr	r2, [pc, #236]	; (8003d38 <TIM_Base_SetConfig+0x120>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a3a      	ldr	r2, [pc, #232]	; (8003d3c <TIM_Base_SetConfig+0x124>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2f      	ldr	r2, [pc, #188]	; (8003d2c <TIM_Base_SetConfig+0x114>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d01f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c78:	d01b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <TIM_Base_SetConfig+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d017      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2b      	ldr	r2, [pc, #172]	; (8003d34 <TIM_Base_SetConfig+0x11c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <TIM_Base_SetConfig+0x120>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <TIM_Base_SetConfig+0x124>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <TIM_Base_SetConfig+0x128>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <TIM_Base_SetConfig+0x12c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x9a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a26      	ldr	r2, [pc, #152]	; (8003d48 <TIM_Base_SetConfig+0x130>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a10      	ldr	r2, [pc, #64]	; (8003d2c <TIM_Base_SetConfig+0x114>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00f      	beq.n	8003d10 <TIM_Base_SetConfig+0xf8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <TIM_Base_SetConfig+0x124>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0xf8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <TIM_Base_SetConfig+0x128>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0xf8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a10      	ldr	r2, [pc, #64]	; (8003d44 <TIM_Base_SetConfig+0x12c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0xf8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0f      	ldr	r2, [pc, #60]	; (8003d48 <TIM_Base_SetConfig+0x130>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d103      	bne.n	8003d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	615a      	str	r2, [r3, #20]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40013400 	.word	0x40013400
 8003d40:	40014000 	.word	0x40014000
 8003d44:	40014400 	.word	0x40014400
 8003d48:	40014800 	.word	0x40014800

08003d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0303 	bic.w	r3, r3, #3
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f023 0302 	bic.w	r3, r3, #2
 8003d98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <TIM_OC1_SetConfig+0x10c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00f      	beq.n	8003dcc <TIM_OC1_SetConfig+0x80>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <TIM_OC1_SetConfig+0x110>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00b      	beq.n	8003dcc <TIM_OC1_SetConfig+0x80>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <TIM_OC1_SetConfig+0x114>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d007      	beq.n	8003dcc <TIM_OC1_SetConfig+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <TIM_OC1_SetConfig+0x118>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC1_SetConfig+0x80>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <TIM_OC1_SetConfig+0x11c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d10c      	bne.n	8003de6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f023 0308 	bic.w	r3, r3, #8
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 0304 	bic.w	r3, r3, #4
 8003de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <TIM_OC1_SetConfig+0x10c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d00f      	beq.n	8003e0e <TIM_OC1_SetConfig+0xc2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <TIM_OC1_SetConfig+0x110>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <TIM_OC1_SetConfig+0xc2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <TIM_OC1_SetConfig+0x114>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d007      	beq.n	8003e0e <TIM_OC1_SetConfig+0xc2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <TIM_OC1_SetConfig+0x118>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d003      	beq.n	8003e0e <TIM_OC1_SetConfig+0xc2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a17      	ldr	r2, [pc, #92]	; (8003e68 <TIM_OC1_SetConfig+0x11c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d111      	bne.n	8003e32 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40013400 	.word	0x40013400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0210 	bic.w	r2, r3, #16
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f023 0320 	bic.w	r3, r3, #32
 8003eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_OC2_SetConfig+0x100>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC2_SetConfig+0x6c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_OC2_SetConfig+0x104>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10d      	bne.n	8003ef4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC2_SetConfig+0x100>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00f      	beq.n	8003f1c <TIM_OC2_SetConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <TIM_OC2_SetConfig+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_OC2_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <TIM_OC2_SetConfig+0x108>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_OC2_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <TIM_OC2_SetConfig+0x10c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC2_SetConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <TIM_OC2_SetConfig+0x110>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d113      	bne.n	8003f44 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a27      	ldr	r2, [pc, #156]	; (800407c <TIM_OC3_SetConfig+0xfc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d003      	beq.n	8003fea <TIM_OC3_SetConfig+0x6a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	; (8004080 <TIM_OC3_SetConfig+0x100>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10d      	bne.n	8004006 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a1c      	ldr	r2, [pc, #112]	; (800407c <TIM_OC3_SetConfig+0xfc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_OC3_SetConfig+0xae>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a1b      	ldr	r2, [pc, #108]	; (8004080 <TIM_OC3_SetConfig+0x100>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_OC3_SetConfig+0xae>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a1a      	ldr	r2, [pc, #104]	; (8004084 <TIM_OC3_SetConfig+0x104>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_OC3_SetConfig+0xae>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <TIM_OC3_SetConfig+0x108>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_OC3_SetConfig+0xae>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <TIM_OC3_SetConfig+0x10c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d113      	bne.n	8004056 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	031b      	lsls	r3, r3, #12
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a18      	ldr	r2, [pc, #96]	; (8004150 <TIM_OC4_SetConfig+0xc0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_OC4_SetConfig+0x84>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a17      	ldr	r2, [pc, #92]	; (8004154 <TIM_OC4_SetConfig+0xc4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_OC4_SetConfig+0x84>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <TIM_OC4_SetConfig+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_OC4_SetConfig+0x84>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <TIM_OC4_SetConfig+0xcc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_OC4_SetConfig+0x84>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a14      	ldr	r2, [pc, #80]	; (8004160 <TIM_OC4_SetConfig+0xd0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d109      	bne.n	8004128 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800411a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	621a      	str	r2, [r3, #32]
}
 8004142:	bf00      	nop
 8004144:	371c      	adds	r7, #28
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40013400 	.word	0x40013400
 8004158:	40014000 	.word	0x40014000
 800415c:	40014400 	.word	0x40014400
 8004160:	40014800 	.word	0x40014800

08004164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4313      	orrs	r3, r2
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <TIM_OC5_SetConfig+0xb4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_OC5_SetConfig+0x7a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <TIM_OC5_SetConfig+0xb8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_OC5_SetConfig+0x7a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a15      	ldr	r2, [pc, #84]	; (8004220 <TIM_OC5_SetConfig+0xbc>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_OC5_SetConfig+0x7a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a14      	ldr	r2, [pc, #80]	; (8004224 <TIM_OC5_SetConfig+0xc0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_OC5_SetConfig+0x7a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a13      	ldr	r2, [pc, #76]	; (8004228 <TIM_OC5_SetConfig+0xc4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d109      	bne.n	80041f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	621a      	str	r2, [r3, #32]
}
 800420c:	bf00      	nop
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	40012c00 	.word	0x40012c00
 800421c:	40013400 	.word	0x40013400
 8004220:	40014000 	.word	0x40014000
 8004224:	40014400 	.word	0x40014400
 8004228:	40014800 	.word	0x40014800

0800422c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	051b      	lsls	r3, r3, #20
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a18      	ldr	r2, [pc, #96]	; (80042e4 <TIM_OC6_SetConfig+0xb8>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00f      	beq.n	80042a8 <TIM_OC6_SetConfig+0x7c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <TIM_OC6_SetConfig+0xbc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_OC6_SetConfig+0x7c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <TIM_OC6_SetConfig+0xc0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_OC6_SetConfig+0x7c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <TIM_OC6_SetConfig+0xc4>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC6_SetConfig+0x7c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <TIM_OC6_SetConfig+0xc8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	029b      	lsls	r3, r3, #10
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1a      	ldr	r2, [r3, #32]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800434a:	bf00      	nop
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004356:	b480      	push	{r7}
 8004358:	b083      	sub	sp, #12
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fc fde9 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 f8c1 	bl	8004544 <UART_SetConfig>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e022      	b.n	8004412 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb6d 	bl	8004ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fbf4 	bl	8004bf8 <UART_CheckIdleState>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}

0800441a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08a      	sub	sp, #40	; 0x28
 800441e:	af02      	add	r7, sp, #8
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	4613      	mov	r3, r2
 8004428:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	2b20      	cmp	r3, #32
 8004430:	f040 8082 	bne.w	8004538 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Transmit+0x26>
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e07a      	b.n	800453a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UART_Transmit+0x38>
 800444e:	2302      	movs	r3, #2
 8004450:	e073      	b.n	800453a <HAL_UART_Transmit+0x120>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2221      	movs	r2, #33	; 0x21
 8004466:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004468:	f7fc fe5a 	bl	8001120 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	88fa      	ldrh	r2, [r7, #6]
 800447a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d108      	bne.n	800449a <HAL_UART_Transmit+0x80>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d104      	bne.n	800449a <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e003      	b.n	80044a2 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80044aa:	e02d      	b.n	8004508 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f000 fbe7 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e039      	b.n	800453a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10b      	bne.n	80044e4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	881a      	ldrh	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d8:	b292      	uxth	r2, r2
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	3302      	adds	r3, #2
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e008      	b.n	80044f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b292      	uxth	r2, r2
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1cb      	bne.n	80044ac <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	2140      	movs	r1, #64	; 0x40
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fbb3 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e005      	b.n	800453a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	e000      	b.n	800453a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
  }
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004548:	b08a      	sub	sp, #40	; 0x28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	431a      	orrs	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	431a      	orrs	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4313      	orrs	r3, r2
 800456a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4ba4      	ldr	r3, [pc, #656]	; (8004804 <UART_SetConfig+0x2c0>)
 8004574:	4013      	ands	r3, r2
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800457c:	430b      	orrs	r3, r1
 800457e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a99      	ldr	r2, [pc, #612]	; (8004808 <UART_SetConfig+0x2c4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	4313      	orrs	r3, r2
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c0:	430a      	orrs	r2, r1
 80045c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a90      	ldr	r2, [pc, #576]	; (800480c <UART_SetConfig+0x2c8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d126      	bne.n	800461c <UART_SetConfig+0xd8>
 80045ce:	4b90      	ldr	r3, [pc, #576]	; (8004810 <UART_SetConfig+0x2cc>)
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	f003 0303 	and.w	r3, r3, #3
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d81b      	bhi.n	8004614 <UART_SetConfig+0xd0>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0xa0>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	08004605 	.word	0x08004605
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e116      	b.n	800482a <UART_SetConfig+0x2e6>
 80045fc:	2302      	movs	r3, #2
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e112      	b.n	800482a <UART_SetConfig+0x2e6>
 8004604:	2304      	movs	r3, #4
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e10e      	b.n	800482a <UART_SetConfig+0x2e6>
 800460c:	2308      	movs	r3, #8
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e10a      	b.n	800482a <UART_SetConfig+0x2e6>
 8004614:	2310      	movs	r3, #16
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e106      	b.n	800482a <UART_SetConfig+0x2e6>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7c      	ldr	r2, [pc, #496]	; (8004814 <UART_SetConfig+0x2d0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d138      	bne.n	8004698 <UART_SetConfig+0x154>
 8004626:	4b7a      	ldr	r3, [pc, #488]	; (8004810 <UART_SetConfig+0x2cc>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b0c      	cmp	r3, #12
 8004632:	d82d      	bhi.n	8004690 <UART_SetConfig+0x14c>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <UART_SetConfig+0xf8>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	08004671 	.word	0x08004671
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	08004691 	.word	0x08004691
 800464c:	08004681 	.word	0x08004681
 8004650:	08004691 	.word	0x08004691
 8004654:	08004691 	.word	0x08004691
 8004658:	08004691 	.word	0x08004691
 800465c:	08004679 	.word	0x08004679
 8004660:	08004691 	.word	0x08004691
 8004664:	08004691 	.word	0x08004691
 8004668:	08004691 	.word	0x08004691
 800466c:	08004689 	.word	0x08004689
 8004670:	2300      	movs	r3, #0
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e0d8      	b.n	800482a <UART_SetConfig+0x2e6>
 8004678:	2302      	movs	r3, #2
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e0d4      	b.n	800482a <UART_SetConfig+0x2e6>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e0d0      	b.n	800482a <UART_SetConfig+0x2e6>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e0cc      	b.n	800482a <UART_SetConfig+0x2e6>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004696:	e0c8      	b.n	800482a <UART_SetConfig+0x2e6>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a5e      	ldr	r2, [pc, #376]	; (8004818 <UART_SetConfig+0x2d4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d125      	bne.n	80046ee <UART_SetConfig+0x1aa>
 80046a2:	4b5b      	ldr	r3, [pc, #364]	; (8004810 <UART_SetConfig+0x2cc>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d016      	beq.n	80046de <UART_SetConfig+0x19a>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d818      	bhi.n	80046e6 <UART_SetConfig+0x1a2>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d00a      	beq.n	80046ce <UART_SetConfig+0x18a>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d814      	bhi.n	80046e6 <UART_SetConfig+0x1a2>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <UART_SetConfig+0x182>
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d008      	beq.n	80046d6 <UART_SetConfig+0x192>
 80046c4:	e00f      	b.n	80046e6 <UART_SetConfig+0x1a2>
 80046c6:	2300      	movs	r3, #0
 80046c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046cc:	e0ad      	b.n	800482a <UART_SetConfig+0x2e6>
 80046ce:	2302      	movs	r3, #2
 80046d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d4:	e0a9      	b.n	800482a <UART_SetConfig+0x2e6>
 80046d6:	2304      	movs	r3, #4
 80046d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046dc:	e0a5      	b.n	800482a <UART_SetConfig+0x2e6>
 80046de:	2308      	movs	r3, #8
 80046e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e4:	e0a1      	b.n	800482a <UART_SetConfig+0x2e6>
 80046e6:	2310      	movs	r3, #16
 80046e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ec:	e09d      	b.n	800482a <UART_SetConfig+0x2e6>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a4a      	ldr	r2, [pc, #296]	; (800481c <UART_SetConfig+0x2d8>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d125      	bne.n	8004744 <UART_SetConfig+0x200>
 80046f8:	4b45      	ldr	r3, [pc, #276]	; (8004810 <UART_SetConfig+0x2cc>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004702:	2bc0      	cmp	r3, #192	; 0xc0
 8004704:	d016      	beq.n	8004734 <UART_SetConfig+0x1f0>
 8004706:	2bc0      	cmp	r3, #192	; 0xc0
 8004708:	d818      	bhi.n	800473c <UART_SetConfig+0x1f8>
 800470a:	2b80      	cmp	r3, #128	; 0x80
 800470c:	d00a      	beq.n	8004724 <UART_SetConfig+0x1e0>
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d814      	bhi.n	800473c <UART_SetConfig+0x1f8>
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <UART_SetConfig+0x1d8>
 8004716:	2b40      	cmp	r3, #64	; 0x40
 8004718:	d008      	beq.n	800472c <UART_SetConfig+0x1e8>
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x1f8>
 800471c:	2300      	movs	r3, #0
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004722:	e082      	b.n	800482a <UART_SetConfig+0x2e6>
 8004724:	2302      	movs	r3, #2
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800472a:	e07e      	b.n	800482a <UART_SetConfig+0x2e6>
 800472c:	2304      	movs	r3, #4
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004732:	e07a      	b.n	800482a <UART_SetConfig+0x2e6>
 8004734:	2308      	movs	r3, #8
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800473a:	e076      	b.n	800482a <UART_SetConfig+0x2e6>
 800473c:	2310      	movs	r3, #16
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004742:	e072      	b.n	800482a <UART_SetConfig+0x2e6>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a35      	ldr	r2, [pc, #212]	; (8004820 <UART_SetConfig+0x2dc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d12a      	bne.n	80047a4 <UART_SetConfig+0x260>
 800474e:	4b30      	ldr	r3, [pc, #192]	; (8004810 <UART_SetConfig+0x2cc>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800475c:	d01a      	beq.n	8004794 <UART_SetConfig+0x250>
 800475e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004762:	d81b      	bhi.n	800479c <UART_SetConfig+0x258>
 8004764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004768:	d00c      	beq.n	8004784 <UART_SetConfig+0x240>
 800476a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476e:	d815      	bhi.n	800479c <UART_SetConfig+0x258>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <UART_SetConfig+0x238>
 8004774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004778:	d008      	beq.n	800478c <UART_SetConfig+0x248>
 800477a:	e00f      	b.n	800479c <UART_SetConfig+0x258>
 800477c:	2300      	movs	r3, #0
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004782:	e052      	b.n	800482a <UART_SetConfig+0x2e6>
 8004784:	2302      	movs	r3, #2
 8004786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800478a:	e04e      	b.n	800482a <UART_SetConfig+0x2e6>
 800478c:	2304      	movs	r3, #4
 800478e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004792:	e04a      	b.n	800482a <UART_SetConfig+0x2e6>
 8004794:	2308      	movs	r3, #8
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479a:	e046      	b.n	800482a <UART_SetConfig+0x2e6>
 800479c:	2310      	movs	r3, #16
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a2:	e042      	b.n	800482a <UART_SetConfig+0x2e6>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a17      	ldr	r2, [pc, #92]	; (8004808 <UART_SetConfig+0x2c4>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d13a      	bne.n	8004824 <UART_SetConfig+0x2e0>
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <UART_SetConfig+0x2cc>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047bc:	d01a      	beq.n	80047f4 <UART_SetConfig+0x2b0>
 80047be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c2:	d81b      	bhi.n	80047fc <UART_SetConfig+0x2b8>
 80047c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047c8:	d00c      	beq.n	80047e4 <UART_SetConfig+0x2a0>
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d815      	bhi.n	80047fc <UART_SetConfig+0x2b8>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <UART_SetConfig+0x298>
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d008      	beq.n	80047ec <UART_SetConfig+0x2a8>
 80047da:	e00f      	b.n	80047fc <UART_SetConfig+0x2b8>
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e2:	e022      	b.n	800482a <UART_SetConfig+0x2e6>
 80047e4:	2302      	movs	r3, #2
 80047e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ea:	e01e      	b.n	800482a <UART_SetConfig+0x2e6>
 80047ec:	2304      	movs	r3, #4
 80047ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f2:	e01a      	b.n	800482a <UART_SetConfig+0x2e6>
 80047f4:	2308      	movs	r3, #8
 80047f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fa:	e016      	b.n	800482a <UART_SetConfig+0x2e6>
 80047fc:	2310      	movs	r3, #16
 80047fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004802:	e012      	b.n	800482a <UART_SetConfig+0x2e6>
 8004804:	efff69f3 	.word	0xefff69f3
 8004808:	40008000 	.word	0x40008000
 800480c:	40013800 	.word	0x40013800
 8004810:	40021000 	.word	0x40021000
 8004814:	40004400 	.word	0x40004400
 8004818:	40004800 	.word	0x40004800
 800481c:	40004c00 	.word	0x40004c00
 8004820:	40005000 	.word	0x40005000
 8004824:	2310      	movs	r3, #16
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a9f      	ldr	r2, [pc, #636]	; (8004aac <UART_SetConfig+0x568>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d17a      	bne.n	800492a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004838:	2b08      	cmp	r3, #8
 800483a:	d824      	bhi.n	8004886 <UART_SetConfig+0x342>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <UART_SetConfig+0x300>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004869 	.word	0x08004869
 8004848:	08004887 	.word	0x08004887
 800484c:	08004871 	.word	0x08004871
 8004850:	08004887 	.word	0x08004887
 8004854:	08004877 	.word	0x08004877
 8004858:	08004887 	.word	0x08004887
 800485c:	08004887 	.word	0x08004887
 8004860:	08004887 	.word	0x08004887
 8004864:	0800487f 	.word	0x0800487f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004868:	f7fd fd0a 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 800486c:	61f8      	str	r0, [r7, #28]
        break;
 800486e:	e010      	b.n	8004892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004870:	4b8f      	ldr	r3, [pc, #572]	; (8004ab0 <UART_SetConfig+0x56c>)
 8004872:	61fb      	str	r3, [r7, #28]
        break;
 8004874:	e00d      	b.n	8004892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004876:	f7fd fc6b 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800487a:	61f8      	str	r0, [r7, #28]
        break;
 800487c:	e009      	b.n	8004892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004882:	61fb      	str	r3, [r7, #28]
        break;
 8004884:	e005      	b.n	8004892 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80fb 	beq.w	8004a90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	69fa      	ldr	r2, [r7, #28]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d305      	bcc.n	80048b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d903      	bls.n	80048be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048bc:	e0e8      	b.n	8004a90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2200      	movs	r2, #0
 80048c2:	461c      	mov	r4, r3
 80048c4:	4615      	mov	r5, r2
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	f04f 0300 	mov.w	r3, #0
 80048ce:	022b      	lsls	r3, r5, #8
 80048d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80048d4:	0222      	lsls	r2, r4, #8
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	6849      	ldr	r1, [r1, #4]
 80048da:	0849      	lsrs	r1, r1, #1
 80048dc:	2000      	movs	r0, #0
 80048de:	4688      	mov	r8, r1
 80048e0:	4681      	mov	r9, r0
 80048e2:	eb12 0a08 	adds.w	sl, r2, r8
 80048e6:	eb43 0b09 	adc.w	fp, r3, r9
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f8:	4650      	mov	r0, sl
 80048fa:	4659      	mov	r1, fp
 80048fc:	f7fb fc64 	bl	80001c8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800490e:	d308      	bcc.n	8004922 <UART_SetConfig+0x3de>
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004916:	d204      	bcs.n	8004922 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	60da      	str	r2, [r3, #12]
 8004920:	e0b6      	b.n	8004a90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004928:	e0b2      	b.n	8004a90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004932:	d15e      	bne.n	80049f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004938:	2b08      	cmp	r3, #8
 800493a:	d828      	bhi.n	800498e <UART_SetConfig+0x44a>
 800493c:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x400>)
 800493e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004942:	bf00      	nop
 8004944:	08004969 	.word	0x08004969
 8004948:	08004971 	.word	0x08004971
 800494c:	08004979 	.word	0x08004979
 8004950:	0800498f 	.word	0x0800498f
 8004954:	0800497f 	.word	0x0800497f
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800498f 	.word	0x0800498f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004968:	f7fd fc8a 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 800496c:	61f8      	str	r0, [r7, #28]
        break;
 800496e:	e014      	b.n	800499a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7fd fc9c 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8004974:	61f8      	str	r0, [r7, #28]
        break;
 8004976:	e010      	b.n	800499a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b4d      	ldr	r3, [pc, #308]	; (8004ab0 <UART_SetConfig+0x56c>)
 800497a:	61fb      	str	r3, [r7, #28]
        break;
 800497c:	e00d      	b.n	800499a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fd fbe7 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004982:	61f8      	str	r0, [r7, #28]
        break;
 8004984:	e009      	b.n	800499a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800498a:	61fb      	str	r3, [r7, #28]
        break;
 800498c:	e005      	b.n	800499a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d077      	beq.n	8004a90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	005a      	lsls	r2, r3, #1
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	085b      	lsrs	r3, r3, #1
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d916      	bls.n	80049ea <UART_SetConfig+0x4a6>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d212      	bcs.n	80049ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	085b      	lsrs	r3, r3, #1
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	b29a      	uxth	r2, r3
 80049da:	8afb      	ldrh	r3, [r7, #22]
 80049dc:	4313      	orrs	r3, r2
 80049de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	8afa      	ldrh	r2, [r7, #22]
 80049e6:	60da      	str	r2, [r3, #12]
 80049e8:	e052      	b.n	8004a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049f0:	e04e      	b.n	8004a90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d827      	bhi.n	8004a4a <UART_SetConfig+0x506>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x4bc>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a25 	.word	0x08004a25
 8004a04:	08004a2d 	.word	0x08004a2d
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a4b 	.word	0x08004a4b
 8004a10:	08004a3b 	.word	0x08004a3b
 8004a14:	08004a4b 	.word	0x08004a4b
 8004a18:	08004a4b 	.word	0x08004a4b
 8004a1c:	08004a4b 	.word	0x08004a4b
 8004a20:	08004a43 	.word	0x08004a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a24:	f7fd fc2c 	bl	8002280 <HAL_RCC_GetPCLK1Freq>
 8004a28:	61f8      	str	r0, [r7, #28]
        break;
 8004a2a:	e014      	b.n	8004a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a2c:	f7fd fc3e 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8004a30:	61f8      	str	r0, [r7, #28]
        break;
 8004a32:	e010      	b.n	8004a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <UART_SetConfig+0x56c>)
 8004a36:	61fb      	str	r3, [r7, #28]
        break;
 8004a38:	e00d      	b.n	8004a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7fd fb89 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8004a3e:	61f8      	str	r0, [r7, #28]
        break;
 8004a40:	e009      	b.n	8004a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a46:	61fb      	str	r3, [r7, #28]
        break;
 8004a48:	e005      	b.n	8004a56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a54:	bf00      	nop
    }

    if (pclk != 0U)
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d019      	beq.n	8004a90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	085a      	lsrs	r2, r3, #1
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	441a      	add	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b0f      	cmp	r3, #15
 8004a74:	d909      	bls.n	8004a8a <UART_SetConfig+0x546>
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7c:	d205      	bcs.n	8004a8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60da      	str	r2, [r3, #12]
 8004a88:	e002      	b.n	8004a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3728      	adds	r7, #40	; 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aaa:	bf00      	nop
 8004aac:	40008000 	.word	0x40008000
 8004ab0:	00f42400 	.word	0x00f42400

08004ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00a      	beq.n	8004b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0308 	and.w	r3, r3, #8
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01a      	beq.n	8004bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb2:	d10a      	bne.n	8004bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	605a      	str	r2, [r3, #4]
  }
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c08:	f7fc fa8a 	bl	8001120 <HAL_GetTick>
 8004c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d10e      	bne.n	8004c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f82d 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e023      	b.n	8004c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d10e      	bne.n	8004c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f817 	bl	8004c8a <UART_WaitOnFlagUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e00d      	b.n	8004c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b09c      	sub	sp, #112	; 0x70
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	60b9      	str	r1, [r7, #8]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	4613      	mov	r3, r2
 8004c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9a:	e0a5      	b.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	f000 80a1 	beq.w	8004de8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7fc fa3b 	bl	8001120 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8004cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d13e      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc4:	e853 3f00 	ldrex	r3, [r3]
 8004cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ce2:	e841 2300 	strex	r3, r2, [r1]
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e6      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	663b      	str	r3, [r7, #96]	; 0x60
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e5      	bne.n	8004cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e067      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d04f      	beq.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d56:	d147      	bne.n	8004de8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	e853 3f00 	ldrex	r3, [r3]
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
 8004d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d88:	e841 2300 	strex	r3, r2, [r1]
 8004d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1e6      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	613b      	str	r3, [r7, #16]
   return(result);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3308      	adds	r3, #8
 8004db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004db4:	623a      	str	r2, [r7, #32]
 8004db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	69f9      	ldr	r1, [r7, #28]
 8004dba:	6a3a      	ldr	r2, [r7, #32]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e5      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e010      	b.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69da      	ldr	r2, [r3, #28]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	f43f af4a 	beq.w	8004c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3770      	adds	r7, #112	; 0x70
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <__errno>:
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <__errno+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20000014 	.word	0x20000014

08004e20 <__libc_init_array>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	4d0d      	ldr	r5, [pc, #52]	; (8004e58 <__libc_init_array+0x38>)
 8004e24:	4c0d      	ldr	r4, [pc, #52]	; (8004e5c <__libc_init_array+0x3c>)
 8004e26:	1b64      	subs	r4, r4, r5
 8004e28:	10a4      	asrs	r4, r4, #2
 8004e2a:	2600      	movs	r6, #0
 8004e2c:	42a6      	cmp	r6, r4
 8004e2e:	d109      	bne.n	8004e44 <__libc_init_array+0x24>
 8004e30:	4d0b      	ldr	r5, [pc, #44]	; (8004e60 <__libc_init_array+0x40>)
 8004e32:	4c0c      	ldr	r4, [pc, #48]	; (8004e64 <__libc_init_array+0x44>)
 8004e34:	f000 fd1e 	bl	8005874 <_init>
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	2600      	movs	r6, #0
 8004e3e:	42a6      	cmp	r6, r4
 8004e40:	d105      	bne.n	8004e4e <__libc_init_array+0x2e>
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e48:	4798      	blx	r3
 8004e4a:	3601      	adds	r6, #1
 8004e4c:	e7ee      	b.n	8004e2c <__libc_init_array+0xc>
 8004e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e52:	4798      	blx	r3
 8004e54:	3601      	adds	r6, #1
 8004e56:	e7f2      	b.n	8004e3e <__libc_init_array+0x1e>
 8004e58:	0800595c 	.word	0x0800595c
 8004e5c:	0800595c 	.word	0x0800595c
 8004e60:	0800595c 	.word	0x0800595c
 8004e64:	08005960 	.word	0x08005960

08004e68 <memset>:
 8004e68:	4402      	add	r2, r0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d100      	bne.n	8004e72 <memset+0xa>
 8004e70:	4770      	bx	lr
 8004e72:	f803 1b01 	strb.w	r1, [r3], #1
 8004e76:	e7f9      	b.n	8004e6c <memset+0x4>

08004e78 <_puts_r>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	460e      	mov	r6, r1
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	b118      	cbz	r0, 8004e88 <_puts_r+0x10>
 8004e80:	6983      	ldr	r3, [r0, #24]
 8004e82:	b90b      	cbnz	r3, 8004e88 <_puts_r+0x10>
 8004e84:	f000 fa48 	bl	8005318 <__sinit>
 8004e88:	69ab      	ldr	r3, [r5, #24]
 8004e8a:	68ac      	ldr	r4, [r5, #8]
 8004e8c:	b913      	cbnz	r3, 8004e94 <_puts_r+0x1c>
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fa42 	bl	8005318 <__sinit>
 8004e94:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <_puts_r+0xd0>)
 8004e96:	429c      	cmp	r4, r3
 8004e98:	d120      	bne.n	8004edc <_puts_r+0x64>
 8004e9a:	686c      	ldr	r4, [r5, #4]
 8004e9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e9e:	07db      	lsls	r3, r3, #31
 8004ea0:	d405      	bmi.n	8004eae <_puts_r+0x36>
 8004ea2:	89a3      	ldrh	r3, [r4, #12]
 8004ea4:	0598      	lsls	r0, r3, #22
 8004ea6:	d402      	bmi.n	8004eae <_puts_r+0x36>
 8004ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eaa:	f000 fad3 	bl	8005454 <__retarget_lock_acquire_recursive>
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	0719      	lsls	r1, r3, #28
 8004eb2:	d51d      	bpl.n	8004ef0 <_puts_r+0x78>
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	b1db      	cbz	r3, 8004ef0 <_puts_r+0x78>
 8004eb8:	3e01      	subs	r6, #1
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	60a3      	str	r3, [r4, #8]
 8004ec4:	bb39      	cbnz	r1, 8004f16 <_puts_r+0x9e>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da38      	bge.n	8004f3c <_puts_r+0xc4>
 8004eca:	4622      	mov	r2, r4
 8004ecc:	210a      	movs	r1, #10
 8004ece:	4628      	mov	r0, r5
 8004ed0:	f000 f848 	bl	8004f64 <__swbuf_r>
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d011      	beq.n	8004efc <_puts_r+0x84>
 8004ed8:	250a      	movs	r5, #10
 8004eda:	e011      	b.n	8004f00 <_puts_r+0x88>
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <_puts_r+0xd4>)
 8004ede:	429c      	cmp	r4, r3
 8004ee0:	d101      	bne.n	8004ee6 <_puts_r+0x6e>
 8004ee2:	68ac      	ldr	r4, [r5, #8]
 8004ee4:	e7da      	b.n	8004e9c <_puts_r+0x24>
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <_puts_r+0xd8>)
 8004ee8:	429c      	cmp	r4, r3
 8004eea:	bf08      	it	eq
 8004eec:	68ec      	ldreq	r4, [r5, #12]
 8004eee:	e7d5      	b.n	8004e9c <_puts_r+0x24>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 f888 	bl	8005008 <__swsetup_r>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	d0dd      	beq.n	8004eb8 <_puts_r+0x40>
 8004efc:	f04f 35ff 	mov.w	r5, #4294967295
 8004f00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f02:	07da      	lsls	r2, r3, #31
 8004f04:	d405      	bmi.n	8004f12 <_puts_r+0x9a>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	059b      	lsls	r3, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_puts_r+0x9a>
 8004f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0e:	f000 faa2 	bl	8005456 <__retarget_lock_release_recursive>
 8004f12:	4628      	mov	r0, r5
 8004f14:	bd70      	pop	{r4, r5, r6, pc}
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da04      	bge.n	8004f24 <_puts_r+0xac>
 8004f1a:	69a2      	ldr	r2, [r4, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	dc06      	bgt.n	8004f2e <_puts_r+0xb6>
 8004f20:	290a      	cmp	r1, #10
 8004f22:	d004      	beq.n	8004f2e <_puts_r+0xb6>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	6022      	str	r2, [r4, #0]
 8004f2a:	7019      	strb	r1, [r3, #0]
 8004f2c:	e7c5      	b.n	8004eba <_puts_r+0x42>
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4628      	mov	r0, r5
 8004f32:	f000 f817 	bl	8004f64 <__swbuf_r>
 8004f36:	3001      	adds	r0, #1
 8004f38:	d1bf      	bne.n	8004eba <_puts_r+0x42>
 8004f3a:	e7df      	b.n	8004efc <_puts_r+0x84>
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	250a      	movs	r5, #10
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	6022      	str	r2, [r4, #0]
 8004f44:	701d      	strb	r5, [r3, #0]
 8004f46:	e7db      	b.n	8004f00 <_puts_r+0x88>
 8004f48:	08005914 	.word	0x08005914
 8004f4c:	08005934 	.word	0x08005934
 8004f50:	080058f4 	.word	0x080058f4

08004f54 <puts>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <puts+0xc>)
 8004f56:	4601      	mov	r1, r0
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f7ff bf8d 	b.w	8004e78 <_puts_r>
 8004f5e:	bf00      	nop
 8004f60:	20000014 	.word	0x20000014

08004f64 <__swbuf_r>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	460e      	mov	r6, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	b118      	cbz	r0, 8004f76 <__swbuf_r+0x12>
 8004f6e:	6983      	ldr	r3, [r0, #24]
 8004f70:	b90b      	cbnz	r3, 8004f76 <__swbuf_r+0x12>
 8004f72:	f000 f9d1 	bl	8005318 <__sinit>
 8004f76:	4b21      	ldr	r3, [pc, #132]	; (8004ffc <__swbuf_r+0x98>)
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d12b      	bne.n	8004fd4 <__swbuf_r+0x70>
 8004f7c:	686c      	ldr	r4, [r5, #4]
 8004f7e:	69a3      	ldr	r3, [r4, #24]
 8004f80:	60a3      	str	r3, [r4, #8]
 8004f82:	89a3      	ldrh	r3, [r4, #12]
 8004f84:	071a      	lsls	r2, r3, #28
 8004f86:	d52f      	bpl.n	8004fe8 <__swbuf_r+0x84>
 8004f88:	6923      	ldr	r3, [r4, #16]
 8004f8a:	b36b      	cbz	r3, 8004fe8 <__swbuf_r+0x84>
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	6820      	ldr	r0, [r4, #0]
 8004f90:	1ac0      	subs	r0, r0, r3
 8004f92:	6963      	ldr	r3, [r4, #20]
 8004f94:	b2f6      	uxtb	r6, r6
 8004f96:	4283      	cmp	r3, r0
 8004f98:	4637      	mov	r7, r6
 8004f9a:	dc04      	bgt.n	8004fa6 <__swbuf_r+0x42>
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f000 f926 	bl	80051f0 <_fflush_r>
 8004fa4:	bb30      	cbnz	r0, 8004ff4 <__swbuf_r+0x90>
 8004fa6:	68a3      	ldr	r3, [r4, #8]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	60a3      	str	r3, [r4, #8]
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	701e      	strb	r6, [r3, #0]
 8004fb4:	6963      	ldr	r3, [r4, #20]
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	4283      	cmp	r3, r0
 8004fba:	d004      	beq.n	8004fc6 <__swbuf_r+0x62>
 8004fbc:	89a3      	ldrh	r3, [r4, #12]
 8004fbe:	07db      	lsls	r3, r3, #31
 8004fc0:	d506      	bpl.n	8004fd0 <__swbuf_r+0x6c>
 8004fc2:	2e0a      	cmp	r6, #10
 8004fc4:	d104      	bne.n	8004fd0 <__swbuf_r+0x6c>
 8004fc6:	4621      	mov	r1, r4
 8004fc8:	4628      	mov	r0, r5
 8004fca:	f000 f911 	bl	80051f0 <_fflush_r>
 8004fce:	b988      	cbnz	r0, 8004ff4 <__swbuf_r+0x90>
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <__swbuf_r+0x9c>)
 8004fd6:	429c      	cmp	r4, r3
 8004fd8:	d101      	bne.n	8004fde <__swbuf_r+0x7a>
 8004fda:	68ac      	ldr	r4, [r5, #8]
 8004fdc:	e7cf      	b.n	8004f7e <__swbuf_r+0x1a>
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <__swbuf_r+0xa0>)
 8004fe0:	429c      	cmp	r4, r3
 8004fe2:	bf08      	it	eq
 8004fe4:	68ec      	ldreq	r4, [r5, #12]
 8004fe6:	e7ca      	b.n	8004f7e <__swbuf_r+0x1a>
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f80c 	bl	8005008 <__swsetup_r>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d0cb      	beq.n	8004f8c <__swbuf_r+0x28>
 8004ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ff8:	e7ea      	b.n	8004fd0 <__swbuf_r+0x6c>
 8004ffa:	bf00      	nop
 8004ffc:	08005914 	.word	0x08005914
 8005000:	08005934 	.word	0x08005934
 8005004:	080058f4 	.word	0x080058f4

08005008 <__swsetup_r>:
 8005008:	4b32      	ldr	r3, [pc, #200]	; (80050d4 <__swsetup_r+0xcc>)
 800500a:	b570      	push	{r4, r5, r6, lr}
 800500c:	681d      	ldr	r5, [r3, #0]
 800500e:	4606      	mov	r6, r0
 8005010:	460c      	mov	r4, r1
 8005012:	b125      	cbz	r5, 800501e <__swsetup_r+0x16>
 8005014:	69ab      	ldr	r3, [r5, #24]
 8005016:	b913      	cbnz	r3, 800501e <__swsetup_r+0x16>
 8005018:	4628      	mov	r0, r5
 800501a:	f000 f97d 	bl	8005318 <__sinit>
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <__swsetup_r+0xd0>)
 8005020:	429c      	cmp	r4, r3
 8005022:	d10f      	bne.n	8005044 <__swsetup_r+0x3c>
 8005024:	686c      	ldr	r4, [r5, #4]
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800502c:	0719      	lsls	r1, r3, #28
 800502e:	d42c      	bmi.n	800508a <__swsetup_r+0x82>
 8005030:	06dd      	lsls	r5, r3, #27
 8005032:	d411      	bmi.n	8005058 <__swsetup_r+0x50>
 8005034:	2309      	movs	r3, #9
 8005036:	6033      	str	r3, [r6, #0]
 8005038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	f04f 30ff 	mov.w	r0, #4294967295
 8005042:	e03e      	b.n	80050c2 <__swsetup_r+0xba>
 8005044:	4b25      	ldr	r3, [pc, #148]	; (80050dc <__swsetup_r+0xd4>)
 8005046:	429c      	cmp	r4, r3
 8005048:	d101      	bne.n	800504e <__swsetup_r+0x46>
 800504a:	68ac      	ldr	r4, [r5, #8]
 800504c:	e7eb      	b.n	8005026 <__swsetup_r+0x1e>
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <__swsetup_r+0xd8>)
 8005050:	429c      	cmp	r4, r3
 8005052:	bf08      	it	eq
 8005054:	68ec      	ldreq	r4, [r5, #12]
 8005056:	e7e6      	b.n	8005026 <__swsetup_r+0x1e>
 8005058:	0758      	lsls	r0, r3, #29
 800505a:	d512      	bpl.n	8005082 <__swsetup_r+0x7a>
 800505c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800505e:	b141      	cbz	r1, 8005072 <__swsetup_r+0x6a>
 8005060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005064:	4299      	cmp	r1, r3
 8005066:	d002      	beq.n	800506e <__swsetup_r+0x66>
 8005068:	4630      	mov	r0, r6
 800506a:	f000 fa5b 	bl	8005524 <_free_r>
 800506e:	2300      	movs	r3, #0
 8005070:	6363      	str	r3, [r4, #52]	; 0x34
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	2300      	movs	r3, #0
 800507c:	6063      	str	r3, [r4, #4]
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f043 0308 	orr.w	r3, r3, #8
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	6923      	ldr	r3, [r4, #16]
 800508c:	b94b      	cbnz	r3, 80050a2 <__swsetup_r+0x9a>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005098:	d003      	beq.n	80050a2 <__swsetup_r+0x9a>
 800509a:	4621      	mov	r1, r4
 800509c:	4630      	mov	r0, r6
 800509e:	f000 fa01 	bl	80054a4 <__smakebuf_r>
 80050a2:	89a0      	ldrh	r0, [r4, #12]
 80050a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80050a8:	f010 0301 	ands.w	r3, r0, #1
 80050ac:	d00a      	beq.n	80050c4 <__swsetup_r+0xbc>
 80050ae:	2300      	movs	r3, #0
 80050b0:	60a3      	str	r3, [r4, #8]
 80050b2:	6963      	ldr	r3, [r4, #20]
 80050b4:	425b      	negs	r3, r3
 80050b6:	61a3      	str	r3, [r4, #24]
 80050b8:	6923      	ldr	r3, [r4, #16]
 80050ba:	b943      	cbnz	r3, 80050ce <__swsetup_r+0xc6>
 80050bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80050c0:	d1ba      	bne.n	8005038 <__swsetup_r+0x30>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	0781      	lsls	r1, r0, #30
 80050c6:	bf58      	it	pl
 80050c8:	6963      	ldrpl	r3, [r4, #20]
 80050ca:	60a3      	str	r3, [r4, #8]
 80050cc:	e7f4      	b.n	80050b8 <__swsetup_r+0xb0>
 80050ce:	2000      	movs	r0, #0
 80050d0:	e7f7      	b.n	80050c2 <__swsetup_r+0xba>
 80050d2:	bf00      	nop
 80050d4:	20000014 	.word	0x20000014
 80050d8:	08005914 	.word	0x08005914
 80050dc:	08005934 	.word	0x08005934
 80050e0:	080058f4 	.word	0x080058f4

080050e4 <__sflush_r>:
 80050e4:	898a      	ldrh	r2, [r1, #12]
 80050e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	4605      	mov	r5, r0
 80050ec:	0710      	lsls	r0, r2, #28
 80050ee:	460c      	mov	r4, r1
 80050f0:	d458      	bmi.n	80051a4 <__sflush_r+0xc0>
 80050f2:	684b      	ldr	r3, [r1, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dc05      	bgt.n	8005104 <__sflush_r+0x20>
 80050f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dc02      	bgt.n	8005104 <__sflush_r+0x20>
 80050fe:	2000      	movs	r0, #0
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005104:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005106:	2e00      	cmp	r6, #0
 8005108:	d0f9      	beq.n	80050fe <__sflush_r+0x1a>
 800510a:	2300      	movs	r3, #0
 800510c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005110:	682f      	ldr	r7, [r5, #0]
 8005112:	602b      	str	r3, [r5, #0]
 8005114:	d032      	beq.n	800517c <__sflush_r+0x98>
 8005116:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005118:	89a3      	ldrh	r3, [r4, #12]
 800511a:	075a      	lsls	r2, r3, #29
 800511c:	d505      	bpl.n	800512a <__sflush_r+0x46>
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	1ac0      	subs	r0, r0, r3
 8005122:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005124:	b10b      	cbz	r3, 800512a <__sflush_r+0x46>
 8005126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005128:	1ac0      	subs	r0, r0, r3
 800512a:	2300      	movs	r3, #0
 800512c:	4602      	mov	r2, r0
 800512e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005130:	6a21      	ldr	r1, [r4, #32]
 8005132:	4628      	mov	r0, r5
 8005134:	47b0      	blx	r6
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	d106      	bne.n	800514a <__sflush_r+0x66>
 800513c:	6829      	ldr	r1, [r5, #0]
 800513e:	291d      	cmp	r1, #29
 8005140:	d82c      	bhi.n	800519c <__sflush_r+0xb8>
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <__sflush_r+0x108>)
 8005144:	40ca      	lsrs	r2, r1
 8005146:	07d6      	lsls	r6, r2, #31
 8005148:	d528      	bpl.n	800519c <__sflush_r+0xb8>
 800514a:	2200      	movs	r2, #0
 800514c:	6062      	str	r2, [r4, #4]
 800514e:	04d9      	lsls	r1, r3, #19
 8005150:	6922      	ldr	r2, [r4, #16]
 8005152:	6022      	str	r2, [r4, #0]
 8005154:	d504      	bpl.n	8005160 <__sflush_r+0x7c>
 8005156:	1c42      	adds	r2, r0, #1
 8005158:	d101      	bne.n	800515e <__sflush_r+0x7a>
 800515a:	682b      	ldr	r3, [r5, #0]
 800515c:	b903      	cbnz	r3, 8005160 <__sflush_r+0x7c>
 800515e:	6560      	str	r0, [r4, #84]	; 0x54
 8005160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005162:	602f      	str	r7, [r5, #0]
 8005164:	2900      	cmp	r1, #0
 8005166:	d0ca      	beq.n	80050fe <__sflush_r+0x1a>
 8005168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800516c:	4299      	cmp	r1, r3
 800516e:	d002      	beq.n	8005176 <__sflush_r+0x92>
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f9d7 	bl	8005524 <_free_r>
 8005176:	2000      	movs	r0, #0
 8005178:	6360      	str	r0, [r4, #52]	; 0x34
 800517a:	e7c1      	b.n	8005100 <__sflush_r+0x1c>
 800517c:	6a21      	ldr	r1, [r4, #32]
 800517e:	2301      	movs	r3, #1
 8005180:	4628      	mov	r0, r5
 8005182:	47b0      	blx	r6
 8005184:	1c41      	adds	r1, r0, #1
 8005186:	d1c7      	bne.n	8005118 <__sflush_r+0x34>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0c4      	beq.n	8005118 <__sflush_r+0x34>
 800518e:	2b1d      	cmp	r3, #29
 8005190:	d001      	beq.n	8005196 <__sflush_r+0xb2>
 8005192:	2b16      	cmp	r3, #22
 8005194:	d101      	bne.n	800519a <__sflush_r+0xb6>
 8005196:	602f      	str	r7, [r5, #0]
 8005198:	e7b1      	b.n	80050fe <__sflush_r+0x1a>
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	e7ad      	b.n	8005100 <__sflush_r+0x1c>
 80051a4:	690f      	ldr	r7, [r1, #16]
 80051a6:	2f00      	cmp	r7, #0
 80051a8:	d0a9      	beq.n	80050fe <__sflush_r+0x1a>
 80051aa:	0793      	lsls	r3, r2, #30
 80051ac:	680e      	ldr	r6, [r1, #0]
 80051ae:	bf08      	it	eq
 80051b0:	694b      	ldreq	r3, [r1, #20]
 80051b2:	600f      	str	r7, [r1, #0]
 80051b4:	bf18      	it	ne
 80051b6:	2300      	movne	r3, #0
 80051b8:	eba6 0807 	sub.w	r8, r6, r7
 80051bc:	608b      	str	r3, [r1, #8]
 80051be:	f1b8 0f00 	cmp.w	r8, #0
 80051c2:	dd9c      	ble.n	80050fe <__sflush_r+0x1a>
 80051c4:	6a21      	ldr	r1, [r4, #32]
 80051c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80051c8:	4643      	mov	r3, r8
 80051ca:	463a      	mov	r2, r7
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b0      	blx	r6
 80051d0:	2800      	cmp	r0, #0
 80051d2:	dc06      	bgt.n	80051e2 <__sflush_r+0xfe>
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295
 80051e0:	e78e      	b.n	8005100 <__sflush_r+0x1c>
 80051e2:	4407      	add	r7, r0
 80051e4:	eba8 0800 	sub.w	r8, r8, r0
 80051e8:	e7e9      	b.n	80051be <__sflush_r+0xda>
 80051ea:	bf00      	nop
 80051ec:	20400001 	.word	0x20400001

080051f0 <_fflush_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	690b      	ldr	r3, [r1, #16]
 80051f4:	4605      	mov	r5, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	b913      	cbnz	r3, 8005200 <_fflush_r+0x10>
 80051fa:	2500      	movs	r5, #0
 80051fc:	4628      	mov	r0, r5
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	b118      	cbz	r0, 800520a <_fflush_r+0x1a>
 8005202:	6983      	ldr	r3, [r0, #24]
 8005204:	b90b      	cbnz	r3, 800520a <_fflush_r+0x1a>
 8005206:	f000 f887 	bl	8005318 <__sinit>
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <_fflush_r+0x6c>)
 800520c:	429c      	cmp	r4, r3
 800520e:	d11b      	bne.n	8005248 <_fflush_r+0x58>
 8005210:	686c      	ldr	r4, [r5, #4]
 8005212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ef      	beq.n	80051fa <_fflush_r+0xa>
 800521a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800521c:	07d0      	lsls	r0, r2, #31
 800521e:	d404      	bmi.n	800522a <_fflush_r+0x3a>
 8005220:	0599      	lsls	r1, r3, #22
 8005222:	d402      	bmi.n	800522a <_fflush_r+0x3a>
 8005224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005226:	f000 f915 	bl	8005454 <__retarget_lock_acquire_recursive>
 800522a:	4628      	mov	r0, r5
 800522c:	4621      	mov	r1, r4
 800522e:	f7ff ff59 	bl	80050e4 <__sflush_r>
 8005232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005234:	07da      	lsls	r2, r3, #31
 8005236:	4605      	mov	r5, r0
 8005238:	d4e0      	bmi.n	80051fc <_fflush_r+0xc>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	059b      	lsls	r3, r3, #22
 800523e:	d4dd      	bmi.n	80051fc <_fflush_r+0xc>
 8005240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005242:	f000 f908 	bl	8005456 <__retarget_lock_release_recursive>
 8005246:	e7d9      	b.n	80051fc <_fflush_r+0xc>
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <_fflush_r+0x70>)
 800524a:	429c      	cmp	r4, r3
 800524c:	d101      	bne.n	8005252 <_fflush_r+0x62>
 800524e:	68ac      	ldr	r4, [r5, #8]
 8005250:	e7df      	b.n	8005212 <_fflush_r+0x22>
 8005252:	4b04      	ldr	r3, [pc, #16]	; (8005264 <_fflush_r+0x74>)
 8005254:	429c      	cmp	r4, r3
 8005256:	bf08      	it	eq
 8005258:	68ec      	ldreq	r4, [r5, #12]
 800525a:	e7da      	b.n	8005212 <_fflush_r+0x22>
 800525c:	08005914 	.word	0x08005914
 8005260:	08005934 	.word	0x08005934
 8005264:	080058f4 	.word	0x080058f4

08005268 <std>:
 8005268:	2300      	movs	r3, #0
 800526a:	b510      	push	{r4, lr}
 800526c:	4604      	mov	r4, r0
 800526e:	e9c0 3300 	strd	r3, r3, [r0]
 8005272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005276:	6083      	str	r3, [r0, #8]
 8005278:	8181      	strh	r1, [r0, #12]
 800527a:	6643      	str	r3, [r0, #100]	; 0x64
 800527c:	81c2      	strh	r2, [r0, #14]
 800527e:	6183      	str	r3, [r0, #24]
 8005280:	4619      	mov	r1, r3
 8005282:	2208      	movs	r2, #8
 8005284:	305c      	adds	r0, #92	; 0x5c
 8005286:	f7ff fdef 	bl	8004e68 <memset>
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <std+0x38>)
 800528c:	6263      	str	r3, [r4, #36]	; 0x24
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <std+0x3c>)
 8005290:	62a3      	str	r3, [r4, #40]	; 0x28
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <std+0x40>)
 8005294:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <std+0x44>)
 8005298:	6224      	str	r4, [r4, #32]
 800529a:	6323      	str	r3, [r4, #48]	; 0x30
 800529c:	bd10      	pop	{r4, pc}
 800529e:	bf00      	nop
 80052a0:	08005705 	.word	0x08005705
 80052a4:	08005727 	.word	0x08005727
 80052a8:	0800575f 	.word	0x0800575f
 80052ac:	08005783 	.word	0x08005783

080052b0 <_cleanup_r>:
 80052b0:	4901      	ldr	r1, [pc, #4]	; (80052b8 <_cleanup_r+0x8>)
 80052b2:	f000 b8af 	b.w	8005414 <_fwalk_reent>
 80052b6:	bf00      	nop
 80052b8:	080051f1 	.word	0x080051f1

080052bc <__sfmoreglue>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	2268      	movs	r2, #104	; 0x68
 80052c0:	1e4d      	subs	r5, r1, #1
 80052c2:	4355      	muls	r5, r2
 80052c4:	460e      	mov	r6, r1
 80052c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80052ca:	f000 f997 	bl	80055fc <_malloc_r>
 80052ce:	4604      	mov	r4, r0
 80052d0:	b140      	cbz	r0, 80052e4 <__sfmoreglue+0x28>
 80052d2:	2100      	movs	r1, #0
 80052d4:	e9c0 1600 	strd	r1, r6, [r0]
 80052d8:	300c      	adds	r0, #12
 80052da:	60a0      	str	r0, [r4, #8]
 80052dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80052e0:	f7ff fdc2 	bl	8004e68 <memset>
 80052e4:	4620      	mov	r0, r4
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <__sfp_lock_acquire>:
 80052e8:	4801      	ldr	r0, [pc, #4]	; (80052f0 <__sfp_lock_acquire+0x8>)
 80052ea:	f000 b8b3 	b.w	8005454 <__retarget_lock_acquire_recursive>
 80052ee:	bf00      	nop
 80052f0:	200001f1 	.word	0x200001f1

080052f4 <__sfp_lock_release>:
 80052f4:	4801      	ldr	r0, [pc, #4]	; (80052fc <__sfp_lock_release+0x8>)
 80052f6:	f000 b8ae 	b.w	8005456 <__retarget_lock_release_recursive>
 80052fa:	bf00      	nop
 80052fc:	200001f1 	.word	0x200001f1

08005300 <__sinit_lock_acquire>:
 8005300:	4801      	ldr	r0, [pc, #4]	; (8005308 <__sinit_lock_acquire+0x8>)
 8005302:	f000 b8a7 	b.w	8005454 <__retarget_lock_acquire_recursive>
 8005306:	bf00      	nop
 8005308:	200001f2 	.word	0x200001f2

0800530c <__sinit_lock_release>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__sinit_lock_release+0x8>)
 800530e:	f000 b8a2 	b.w	8005456 <__retarget_lock_release_recursive>
 8005312:	bf00      	nop
 8005314:	200001f2 	.word	0x200001f2

08005318 <__sinit>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4604      	mov	r4, r0
 800531c:	f7ff fff0 	bl	8005300 <__sinit_lock_acquire>
 8005320:	69a3      	ldr	r3, [r4, #24]
 8005322:	b11b      	cbz	r3, 800532c <__sinit+0x14>
 8005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005328:	f7ff bff0 	b.w	800530c <__sinit_lock_release>
 800532c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005330:	6523      	str	r3, [r4, #80]	; 0x50
 8005332:	4b13      	ldr	r3, [pc, #76]	; (8005380 <__sinit+0x68>)
 8005334:	4a13      	ldr	r2, [pc, #76]	; (8005384 <__sinit+0x6c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	62a2      	str	r2, [r4, #40]	; 0x28
 800533a:	42a3      	cmp	r3, r4
 800533c:	bf04      	itt	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	61a3      	streq	r3, [r4, #24]
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f820 	bl	8005388 <__sfp>
 8005348:	6060      	str	r0, [r4, #4]
 800534a:	4620      	mov	r0, r4
 800534c:	f000 f81c 	bl	8005388 <__sfp>
 8005350:	60a0      	str	r0, [r4, #8]
 8005352:	4620      	mov	r0, r4
 8005354:	f000 f818 	bl	8005388 <__sfp>
 8005358:	2200      	movs	r2, #0
 800535a:	60e0      	str	r0, [r4, #12]
 800535c:	2104      	movs	r1, #4
 800535e:	6860      	ldr	r0, [r4, #4]
 8005360:	f7ff ff82 	bl	8005268 <std>
 8005364:	68a0      	ldr	r0, [r4, #8]
 8005366:	2201      	movs	r2, #1
 8005368:	2109      	movs	r1, #9
 800536a:	f7ff ff7d 	bl	8005268 <std>
 800536e:	68e0      	ldr	r0, [r4, #12]
 8005370:	2202      	movs	r2, #2
 8005372:	2112      	movs	r1, #18
 8005374:	f7ff ff78 	bl	8005268 <std>
 8005378:	2301      	movs	r3, #1
 800537a:	61a3      	str	r3, [r4, #24]
 800537c:	e7d2      	b.n	8005324 <__sinit+0xc>
 800537e:	bf00      	nop
 8005380:	080058f0 	.word	0x080058f0
 8005384:	080052b1 	.word	0x080052b1

08005388 <__sfp>:
 8005388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538a:	4607      	mov	r7, r0
 800538c:	f7ff ffac 	bl	80052e8 <__sfp_lock_acquire>
 8005390:	4b1e      	ldr	r3, [pc, #120]	; (800540c <__sfp+0x84>)
 8005392:	681e      	ldr	r6, [r3, #0]
 8005394:	69b3      	ldr	r3, [r6, #24]
 8005396:	b913      	cbnz	r3, 800539e <__sfp+0x16>
 8005398:	4630      	mov	r0, r6
 800539a:	f7ff ffbd 	bl	8005318 <__sinit>
 800539e:	3648      	adds	r6, #72	; 0x48
 80053a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	d503      	bpl.n	80053b0 <__sfp+0x28>
 80053a8:	6833      	ldr	r3, [r6, #0]
 80053aa:	b30b      	cbz	r3, 80053f0 <__sfp+0x68>
 80053ac:	6836      	ldr	r6, [r6, #0]
 80053ae:	e7f7      	b.n	80053a0 <__sfp+0x18>
 80053b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053b4:	b9d5      	cbnz	r5, 80053ec <__sfp+0x64>
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <__sfp+0x88>)
 80053b8:	60e3      	str	r3, [r4, #12]
 80053ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053be:	6665      	str	r5, [r4, #100]	; 0x64
 80053c0:	f000 f847 	bl	8005452 <__retarget_lock_init_recursive>
 80053c4:	f7ff ff96 	bl	80052f4 <__sfp_lock_release>
 80053c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80053cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80053d0:	6025      	str	r5, [r4, #0]
 80053d2:	61a5      	str	r5, [r4, #24]
 80053d4:	2208      	movs	r2, #8
 80053d6:	4629      	mov	r1, r5
 80053d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80053dc:	f7ff fd44 	bl	8004e68 <memset>
 80053e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80053e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80053e8:	4620      	mov	r0, r4
 80053ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ec:	3468      	adds	r4, #104	; 0x68
 80053ee:	e7d9      	b.n	80053a4 <__sfp+0x1c>
 80053f0:	2104      	movs	r1, #4
 80053f2:	4638      	mov	r0, r7
 80053f4:	f7ff ff62 	bl	80052bc <__sfmoreglue>
 80053f8:	4604      	mov	r4, r0
 80053fa:	6030      	str	r0, [r6, #0]
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d1d5      	bne.n	80053ac <__sfp+0x24>
 8005400:	f7ff ff78 	bl	80052f4 <__sfp_lock_release>
 8005404:	230c      	movs	r3, #12
 8005406:	603b      	str	r3, [r7, #0]
 8005408:	e7ee      	b.n	80053e8 <__sfp+0x60>
 800540a:	bf00      	nop
 800540c:	080058f0 	.word	0x080058f0
 8005410:	ffff0001 	.word	0xffff0001

08005414 <_fwalk_reent>:
 8005414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005418:	4606      	mov	r6, r0
 800541a:	4688      	mov	r8, r1
 800541c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005420:	2700      	movs	r7, #0
 8005422:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005426:	f1b9 0901 	subs.w	r9, r9, #1
 800542a:	d505      	bpl.n	8005438 <_fwalk_reent+0x24>
 800542c:	6824      	ldr	r4, [r4, #0]
 800542e:	2c00      	cmp	r4, #0
 8005430:	d1f7      	bne.n	8005422 <_fwalk_reent+0xe>
 8005432:	4638      	mov	r0, r7
 8005434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005438:	89ab      	ldrh	r3, [r5, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d907      	bls.n	800544e <_fwalk_reent+0x3a>
 800543e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005442:	3301      	adds	r3, #1
 8005444:	d003      	beq.n	800544e <_fwalk_reent+0x3a>
 8005446:	4629      	mov	r1, r5
 8005448:	4630      	mov	r0, r6
 800544a:	47c0      	blx	r8
 800544c:	4307      	orrs	r7, r0
 800544e:	3568      	adds	r5, #104	; 0x68
 8005450:	e7e9      	b.n	8005426 <_fwalk_reent+0x12>

08005452 <__retarget_lock_init_recursive>:
 8005452:	4770      	bx	lr

08005454 <__retarget_lock_acquire_recursive>:
 8005454:	4770      	bx	lr

08005456 <__retarget_lock_release_recursive>:
 8005456:	4770      	bx	lr

08005458 <__swhatbuf_r>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	460e      	mov	r6, r1
 800545c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005460:	2900      	cmp	r1, #0
 8005462:	b096      	sub	sp, #88	; 0x58
 8005464:	4614      	mov	r4, r2
 8005466:	461d      	mov	r5, r3
 8005468:	da08      	bge.n	800547c <__swhatbuf_r+0x24>
 800546a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	061a      	lsls	r2, r3, #24
 8005474:	d410      	bmi.n	8005498 <__swhatbuf_r+0x40>
 8005476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800547a:	e00e      	b.n	800549a <__swhatbuf_r+0x42>
 800547c:	466a      	mov	r2, sp
 800547e:	f000 f9a7 	bl	80057d0 <_fstat_r>
 8005482:	2800      	cmp	r0, #0
 8005484:	dbf1      	blt.n	800546a <__swhatbuf_r+0x12>
 8005486:	9a01      	ldr	r2, [sp, #4]
 8005488:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800548c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005490:	425a      	negs	r2, r3
 8005492:	415a      	adcs	r2, r3
 8005494:	602a      	str	r2, [r5, #0]
 8005496:	e7ee      	b.n	8005476 <__swhatbuf_r+0x1e>
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	2000      	movs	r0, #0
 800549c:	6023      	str	r3, [r4, #0]
 800549e:	b016      	add	sp, #88	; 0x58
 80054a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080054a4 <__smakebuf_r>:
 80054a4:	898b      	ldrh	r3, [r1, #12]
 80054a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054a8:	079d      	lsls	r5, r3, #30
 80054aa:	4606      	mov	r6, r0
 80054ac:	460c      	mov	r4, r1
 80054ae:	d507      	bpl.n	80054c0 <__smakebuf_r+0x1c>
 80054b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054b4:	6023      	str	r3, [r4, #0]
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	2301      	movs	r3, #1
 80054ba:	6163      	str	r3, [r4, #20]
 80054bc:	b002      	add	sp, #8
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	ab01      	add	r3, sp, #4
 80054c2:	466a      	mov	r2, sp
 80054c4:	f7ff ffc8 	bl	8005458 <__swhatbuf_r>
 80054c8:	9900      	ldr	r1, [sp, #0]
 80054ca:	4605      	mov	r5, r0
 80054cc:	4630      	mov	r0, r6
 80054ce:	f000 f895 	bl	80055fc <_malloc_r>
 80054d2:	b948      	cbnz	r0, 80054e8 <__smakebuf_r+0x44>
 80054d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d8:	059a      	lsls	r2, r3, #22
 80054da:	d4ef      	bmi.n	80054bc <__smakebuf_r+0x18>
 80054dc:	f023 0303 	bic.w	r3, r3, #3
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	81a3      	strh	r3, [r4, #12]
 80054e6:	e7e3      	b.n	80054b0 <__smakebuf_r+0xc>
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <__smakebuf_r+0x7c>)
 80054ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	6020      	str	r0, [r4, #0]
 80054f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f4:	81a3      	strh	r3, [r4, #12]
 80054f6:	9b00      	ldr	r3, [sp, #0]
 80054f8:	6163      	str	r3, [r4, #20]
 80054fa:	9b01      	ldr	r3, [sp, #4]
 80054fc:	6120      	str	r0, [r4, #16]
 80054fe:	b15b      	cbz	r3, 8005518 <__smakebuf_r+0x74>
 8005500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005504:	4630      	mov	r0, r6
 8005506:	f000 f975 	bl	80057f4 <_isatty_r>
 800550a:	b128      	cbz	r0, 8005518 <__smakebuf_r+0x74>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	89a0      	ldrh	r0, [r4, #12]
 800551a:	4305      	orrs	r5, r0
 800551c:	81a5      	strh	r5, [r4, #12]
 800551e:	e7cd      	b.n	80054bc <__smakebuf_r+0x18>
 8005520:	080052b1 	.word	0x080052b1

08005524 <_free_r>:
 8005524:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005526:	2900      	cmp	r1, #0
 8005528:	d044      	beq.n	80055b4 <_free_r+0x90>
 800552a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800552e:	9001      	str	r0, [sp, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f1a1 0404 	sub.w	r4, r1, #4
 8005536:	bfb8      	it	lt
 8005538:	18e4      	addlt	r4, r4, r3
 800553a:	f000 f97d 	bl	8005838 <__malloc_lock>
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <_free_r+0x94>)
 8005540:	9801      	ldr	r0, [sp, #4]
 8005542:	6813      	ldr	r3, [r2, #0]
 8005544:	b933      	cbnz	r3, 8005554 <_free_r+0x30>
 8005546:	6063      	str	r3, [r4, #4]
 8005548:	6014      	str	r4, [r2, #0]
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005550:	f000 b978 	b.w	8005844 <__malloc_unlock>
 8005554:	42a3      	cmp	r3, r4
 8005556:	d908      	bls.n	800556a <_free_r+0x46>
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1961      	adds	r1, r4, r5
 800555c:	428b      	cmp	r3, r1
 800555e:	bf01      	itttt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	1949      	addeq	r1, r1, r5
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	e7ed      	b.n	8005546 <_free_r+0x22>
 800556a:	461a      	mov	r2, r3
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	b10b      	cbz	r3, 8005574 <_free_r+0x50>
 8005570:	42a3      	cmp	r3, r4
 8005572:	d9fa      	bls.n	800556a <_free_r+0x46>
 8005574:	6811      	ldr	r1, [r2, #0]
 8005576:	1855      	adds	r5, r2, r1
 8005578:	42a5      	cmp	r5, r4
 800557a:	d10b      	bne.n	8005594 <_free_r+0x70>
 800557c:	6824      	ldr	r4, [r4, #0]
 800557e:	4421      	add	r1, r4
 8005580:	1854      	adds	r4, r2, r1
 8005582:	42a3      	cmp	r3, r4
 8005584:	6011      	str	r1, [r2, #0]
 8005586:	d1e0      	bne.n	800554a <_free_r+0x26>
 8005588:	681c      	ldr	r4, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	6053      	str	r3, [r2, #4]
 800558e:	4421      	add	r1, r4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	e7da      	b.n	800554a <_free_r+0x26>
 8005594:	d902      	bls.n	800559c <_free_r+0x78>
 8005596:	230c      	movs	r3, #12
 8005598:	6003      	str	r3, [r0, #0]
 800559a:	e7d6      	b.n	800554a <_free_r+0x26>
 800559c:	6825      	ldr	r5, [r4, #0]
 800559e:	1961      	adds	r1, r4, r5
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf04      	itt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	bf04      	itt	eq
 80055ac:	1949      	addeq	r1, r1, r5
 80055ae:	6021      	streq	r1, [r4, #0]
 80055b0:	6054      	str	r4, [r2, #4]
 80055b2:	e7ca      	b.n	800554a <_free_r+0x26>
 80055b4:	b003      	add	sp, #12
 80055b6:	bd30      	pop	{r4, r5, pc}
 80055b8:	200001f4 	.word	0x200001f4

080055bc <sbrk_aligned>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4e0e      	ldr	r6, [pc, #56]	; (80055f8 <sbrk_aligned+0x3c>)
 80055c0:	460c      	mov	r4, r1
 80055c2:	6831      	ldr	r1, [r6, #0]
 80055c4:	4605      	mov	r5, r0
 80055c6:	b911      	cbnz	r1, 80055ce <sbrk_aligned+0x12>
 80055c8:	f000 f88c 	bl	80056e4 <_sbrk_r>
 80055cc:	6030      	str	r0, [r6, #0]
 80055ce:	4621      	mov	r1, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	f000 f887 	bl	80056e4 <_sbrk_r>
 80055d6:	1c43      	adds	r3, r0, #1
 80055d8:	d00a      	beq.n	80055f0 <sbrk_aligned+0x34>
 80055da:	1cc4      	adds	r4, r0, #3
 80055dc:	f024 0403 	bic.w	r4, r4, #3
 80055e0:	42a0      	cmp	r0, r4
 80055e2:	d007      	beq.n	80055f4 <sbrk_aligned+0x38>
 80055e4:	1a21      	subs	r1, r4, r0
 80055e6:	4628      	mov	r0, r5
 80055e8:	f000 f87c 	bl	80056e4 <_sbrk_r>
 80055ec:	3001      	adds	r0, #1
 80055ee:	d101      	bne.n	80055f4 <sbrk_aligned+0x38>
 80055f0:	f04f 34ff 	mov.w	r4, #4294967295
 80055f4:	4620      	mov	r0, r4
 80055f6:	bd70      	pop	{r4, r5, r6, pc}
 80055f8:	200001f8 	.word	0x200001f8

080055fc <_malloc_r>:
 80055fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005600:	1ccd      	adds	r5, r1, #3
 8005602:	f025 0503 	bic.w	r5, r5, #3
 8005606:	3508      	adds	r5, #8
 8005608:	2d0c      	cmp	r5, #12
 800560a:	bf38      	it	cc
 800560c:	250c      	movcc	r5, #12
 800560e:	2d00      	cmp	r5, #0
 8005610:	4607      	mov	r7, r0
 8005612:	db01      	blt.n	8005618 <_malloc_r+0x1c>
 8005614:	42a9      	cmp	r1, r5
 8005616:	d905      	bls.n	8005624 <_malloc_r+0x28>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	2600      	movs	r6, #0
 800561e:	4630      	mov	r0, r6
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	4e2e      	ldr	r6, [pc, #184]	; (80056e0 <_malloc_r+0xe4>)
 8005626:	f000 f907 	bl	8005838 <__malloc_lock>
 800562a:	6833      	ldr	r3, [r6, #0]
 800562c:	461c      	mov	r4, r3
 800562e:	bb34      	cbnz	r4, 800567e <_malloc_r+0x82>
 8005630:	4629      	mov	r1, r5
 8005632:	4638      	mov	r0, r7
 8005634:	f7ff ffc2 	bl	80055bc <sbrk_aligned>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	4604      	mov	r4, r0
 800563c:	d14d      	bne.n	80056da <_malloc_r+0xde>
 800563e:	6834      	ldr	r4, [r6, #0]
 8005640:	4626      	mov	r6, r4
 8005642:	2e00      	cmp	r6, #0
 8005644:	d140      	bne.n	80056c8 <_malloc_r+0xcc>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	4631      	mov	r1, r6
 800564a:	4638      	mov	r0, r7
 800564c:	eb04 0803 	add.w	r8, r4, r3
 8005650:	f000 f848 	bl	80056e4 <_sbrk_r>
 8005654:	4580      	cmp	r8, r0
 8005656:	d13a      	bne.n	80056ce <_malloc_r+0xd2>
 8005658:	6821      	ldr	r1, [r4, #0]
 800565a:	3503      	adds	r5, #3
 800565c:	1a6d      	subs	r5, r5, r1
 800565e:	f025 0503 	bic.w	r5, r5, #3
 8005662:	3508      	adds	r5, #8
 8005664:	2d0c      	cmp	r5, #12
 8005666:	bf38      	it	cc
 8005668:	250c      	movcc	r5, #12
 800566a:	4629      	mov	r1, r5
 800566c:	4638      	mov	r0, r7
 800566e:	f7ff ffa5 	bl	80055bc <sbrk_aligned>
 8005672:	3001      	adds	r0, #1
 8005674:	d02b      	beq.n	80056ce <_malloc_r+0xd2>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	442b      	add	r3, r5
 800567a:	6023      	str	r3, [r4, #0]
 800567c:	e00e      	b.n	800569c <_malloc_r+0xa0>
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	1b52      	subs	r2, r2, r5
 8005682:	d41e      	bmi.n	80056c2 <_malloc_r+0xc6>
 8005684:	2a0b      	cmp	r2, #11
 8005686:	d916      	bls.n	80056b6 <_malloc_r+0xba>
 8005688:	1961      	adds	r1, r4, r5
 800568a:	42a3      	cmp	r3, r4
 800568c:	6025      	str	r5, [r4, #0]
 800568e:	bf18      	it	ne
 8005690:	6059      	strne	r1, [r3, #4]
 8005692:	6863      	ldr	r3, [r4, #4]
 8005694:	bf08      	it	eq
 8005696:	6031      	streq	r1, [r6, #0]
 8005698:	5162      	str	r2, [r4, r5]
 800569a:	604b      	str	r3, [r1, #4]
 800569c:	4638      	mov	r0, r7
 800569e:	f104 060b 	add.w	r6, r4, #11
 80056a2:	f000 f8cf 	bl	8005844 <__malloc_unlock>
 80056a6:	f026 0607 	bic.w	r6, r6, #7
 80056aa:	1d23      	adds	r3, r4, #4
 80056ac:	1af2      	subs	r2, r6, r3
 80056ae:	d0b6      	beq.n	800561e <_malloc_r+0x22>
 80056b0:	1b9b      	subs	r3, r3, r6
 80056b2:	50a3      	str	r3, [r4, r2]
 80056b4:	e7b3      	b.n	800561e <_malloc_r+0x22>
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	bf0c      	ite	eq
 80056bc:	6032      	streq	r2, [r6, #0]
 80056be:	605a      	strne	r2, [r3, #4]
 80056c0:	e7ec      	b.n	800569c <_malloc_r+0xa0>
 80056c2:	4623      	mov	r3, r4
 80056c4:	6864      	ldr	r4, [r4, #4]
 80056c6:	e7b2      	b.n	800562e <_malloc_r+0x32>
 80056c8:	4634      	mov	r4, r6
 80056ca:	6876      	ldr	r6, [r6, #4]
 80056cc:	e7b9      	b.n	8005642 <_malloc_r+0x46>
 80056ce:	230c      	movs	r3, #12
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	4638      	mov	r0, r7
 80056d4:	f000 f8b6 	bl	8005844 <__malloc_unlock>
 80056d8:	e7a1      	b.n	800561e <_malloc_r+0x22>
 80056da:	6025      	str	r5, [r4, #0]
 80056dc:	e7de      	b.n	800569c <_malloc_r+0xa0>
 80056de:	bf00      	nop
 80056e0:	200001f4 	.word	0x200001f4

080056e4 <_sbrk_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4d06      	ldr	r5, [pc, #24]	; (8005700 <_sbrk_r+0x1c>)
 80056e8:	2300      	movs	r3, #0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4608      	mov	r0, r1
 80056ee:	602b      	str	r3, [r5, #0]
 80056f0:	f7fb fb90 	bl	8000e14 <_sbrk>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_sbrk_r+0x1a>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_sbrk_r+0x1a>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	200001fc 	.word	0x200001fc

08005704 <__sread>:
 8005704:	b510      	push	{r4, lr}
 8005706:	460c      	mov	r4, r1
 8005708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570c:	f000 f8a0 	bl	8005850 <_read_r>
 8005710:	2800      	cmp	r0, #0
 8005712:	bfab      	itete	ge
 8005714:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005716:	89a3      	ldrhlt	r3, [r4, #12]
 8005718:	181b      	addge	r3, r3, r0
 800571a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800571e:	bfac      	ite	ge
 8005720:	6563      	strge	r3, [r4, #84]	; 0x54
 8005722:	81a3      	strhlt	r3, [r4, #12]
 8005724:	bd10      	pop	{r4, pc}

08005726 <__swrite>:
 8005726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572a:	461f      	mov	r7, r3
 800572c:	898b      	ldrh	r3, [r1, #12]
 800572e:	05db      	lsls	r3, r3, #23
 8005730:	4605      	mov	r5, r0
 8005732:	460c      	mov	r4, r1
 8005734:	4616      	mov	r6, r2
 8005736:	d505      	bpl.n	8005744 <__swrite+0x1e>
 8005738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800573c:	2302      	movs	r3, #2
 800573e:	2200      	movs	r2, #0
 8005740:	f000 f868 	bl	8005814 <_lseek_r>
 8005744:	89a3      	ldrh	r3, [r4, #12]
 8005746:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800574a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800574e:	81a3      	strh	r3, [r4, #12]
 8005750:	4632      	mov	r2, r6
 8005752:	463b      	mov	r3, r7
 8005754:	4628      	mov	r0, r5
 8005756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800575a:	f000 b817 	b.w	800578c <_write_r>

0800575e <__sseek>:
 800575e:	b510      	push	{r4, lr}
 8005760:	460c      	mov	r4, r1
 8005762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005766:	f000 f855 	bl	8005814 <_lseek_r>
 800576a:	1c43      	adds	r3, r0, #1
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	bf15      	itete	ne
 8005770:	6560      	strne	r0, [r4, #84]	; 0x54
 8005772:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005776:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800577a:	81a3      	strheq	r3, [r4, #12]
 800577c:	bf18      	it	ne
 800577e:	81a3      	strhne	r3, [r4, #12]
 8005780:	bd10      	pop	{r4, pc}

08005782 <__sclose>:
 8005782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005786:	f000 b813 	b.w	80057b0 <_close_r>
	...

0800578c <_write_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	; (80057ac <_write_r+0x20>)
 8005790:	4604      	mov	r4, r0
 8005792:	4608      	mov	r0, r1
 8005794:	4611      	mov	r1, r2
 8005796:	2200      	movs	r2, #0
 8005798:	602a      	str	r2, [r5, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	f7fb fae9 	bl	8000d72 <_write>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_write_r+0x1e>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_write_r+0x1e>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200001fc 	.word	0x200001fc

080057b0 <_close_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	; (80057cc <_close_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fb faf5 	bl	8000daa <_close>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_close_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_close_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	200001fc 	.word	0x200001fc

080057d0 <_fstat_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d07      	ldr	r5, [pc, #28]	; (80057f0 <_fstat_r+0x20>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	4611      	mov	r1, r2
 80057dc:	602b      	str	r3, [r5, #0]
 80057de:	f7fb faf0 	bl	8000dc2 <_fstat>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d102      	bne.n	80057ec <_fstat_r+0x1c>
 80057e6:	682b      	ldr	r3, [r5, #0]
 80057e8:	b103      	cbz	r3, 80057ec <_fstat_r+0x1c>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd38      	pop	{r3, r4, r5, pc}
 80057ee:	bf00      	nop
 80057f0:	200001fc 	.word	0x200001fc

080057f4 <_isatty_r>:
 80057f4:	b538      	push	{r3, r4, r5, lr}
 80057f6:	4d06      	ldr	r5, [pc, #24]	; (8005810 <_isatty_r+0x1c>)
 80057f8:	2300      	movs	r3, #0
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	602b      	str	r3, [r5, #0]
 8005800:	f7fb faef 	bl	8000de2 <_isatty>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_isatty_r+0x1a>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_isatty_r+0x1a>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	200001fc 	.word	0x200001fc

08005814 <_lseek_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d07      	ldr	r5, [pc, #28]	; (8005834 <_lseek_r+0x20>)
 8005818:	4604      	mov	r4, r0
 800581a:	4608      	mov	r0, r1
 800581c:	4611      	mov	r1, r2
 800581e:	2200      	movs	r2, #0
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fb fae8 	bl	8000df8 <_lseek>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_lseek_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_lseek_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	200001fc 	.word	0x200001fc

08005838 <__malloc_lock>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__malloc_lock+0x8>)
 800583a:	f7ff be0b 	b.w	8005454 <__retarget_lock_acquire_recursive>
 800583e:	bf00      	nop
 8005840:	200001f0 	.word	0x200001f0

08005844 <__malloc_unlock>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__malloc_unlock+0x8>)
 8005846:	f7ff be06 	b.w	8005456 <__retarget_lock_release_recursive>
 800584a:	bf00      	nop
 800584c:	200001f0 	.word	0x200001f0

08005850 <_read_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	; (8005870 <_read_r+0x20>)
 8005854:	4604      	mov	r4, r0
 8005856:	4608      	mov	r0, r1
 8005858:	4611      	mov	r1, r2
 800585a:	2200      	movs	r2, #0
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	f7fb fa6a 	bl	8000d38 <_read>
 8005864:	1c43      	adds	r3, r0, #1
 8005866:	d102      	bne.n	800586e <_read_r+0x1e>
 8005868:	682b      	ldr	r3, [r5, #0]
 800586a:	b103      	cbz	r3, 800586e <_read_r+0x1e>
 800586c:	6023      	str	r3, [r4, #0]
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	200001fc 	.word	0x200001fc

08005874 <_init>:
 8005874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005876:	bf00      	nop
 8005878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800587a:	bc08      	pop	{r3}
 800587c:	469e      	mov	lr, r3
 800587e:	4770      	bx	lr

08005880 <_fini>:
 8005880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005882:	bf00      	nop
 8005884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005886:	bc08      	pop	{r3}
 8005888:	469e      	mov	lr, r3
 800588a:	4770      	bx	lr
